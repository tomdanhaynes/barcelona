{
    "Blueprints": {
        "stack_name": "HDP",
        "stack_version": "2.3"
    },
    "configurations": [
        {
            "zoo.cfg": {
                "properties": {
                    "autopurge.purgeInterval": "24",
                    "autopurge.snapRetainCount": "30",
                    "clientPort": "2181",
                    "dataDir": "/grid/hadoop/zookeeper",
                    "initLimit": "10",
                    "syncLimit": "5",
                    "tickTime": "2000"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-hbase-site": {
                "properties": {
                    "dfs.client.read.shortcircuit": "true",
                    "hbase.client.scanner.caching": "10000",
                    "hbase.client.scanner.timeout.period": "900000",
                    "hbase.cluster.distributed": "false",
                    "hbase.hregion.majorcompaction": "0",
                    "hbase.hregion.memstore.block.multiplier": "4",
                    "hbase.hregion.memstore.flush.size": "134217728",
                    "hbase.hstore.blockingStoreFiles": "200",
                    "hbase.hstore.flusher.count": "2",
                    "hbase.local.dir": "${hbase.tmp.dir}/local",
                    "hbase.master.info.bindAddress": "0.0.0.0",
                    "hbase.master.info.port": "61310",
                    "hbase.master.port": "61300",
                    "hbase.master.wait.on.regionservers.mintostart": "1",
                    "hbase.regionserver.global.memstore.lowerLimit": "0.3",
                    "hbase.regionserver.global.memstore.upperLimit": "0.35",
                    "hbase.regionserver.info.port": "61330",
                    "hbase.regionserver.port": "61320",
                    "hbase.regionserver.thread.compaction.large": "2",
                    "hbase.regionserver.thread.compaction.small": "3",
                    "hbase.replication": "false",
                    "hbase.rootdir": "file:///grid/hadoop/var/lib/ambari-metrics-collector/hbase",
                    "hbase.snapshot.enabled": "false",
                    "hbase.tmp.dir": "/grid/hadoop/var/lib/ambari-metrics-collector/hbase-tmp",
                    "hbase.zookeeper.leaderport": "61388",
                    "hbase.zookeeper.peerport": "61288",
                    "hbase.zookeeper.property.clientPort": "61181",
                    "hbase.zookeeper.property.dataDir": "${hbase.tmp.dir}/zookeeper",
                    "hbase.zookeeper.quorum": "%HOSTGROUP::host_group_zk_1%:2181,%HOSTGROUP::host_group_zk_2%:2181",
                    "hfile.block.cache.size": "0.3",
                    "phoenix.groupby.maxCacheSize": "307200000",
                    "phoenix.mutate.batchSize": "10000",
                    "phoenix.query.maxGlobalMemoryPercentage": "15",
                    "phoenix.query.rowKeyOrderSaltedTable": "true",
                    "phoenix.query.spoolThresholdBytes": "12582912",
                    "phoenix.query.timeoutMs": "1200000",
                    "phoenix.sequence.saltBuckets": "2",
                    "phoenix.spool.directory": "${hbase.tmp.dir}/phoenix-spool",
                    "zookeeper.session.timeout": "120000",
                    "zookeeper.session.timeout.localHBaseCluster": "20000"
                },
                "properties_attributes": {
                    "final": {
                        "hbase.zookeeper.quorum": "true"
                    }
                }
            }
        },
        {
            "zookeeper-log4j": {
                "properties": {
                    "content": "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n#\n# ZooKeeper Logging Configuration\n#\n\n# DEFAULT: console appender only\nlog4j.rootLogger=INFO, CONSOLE\n\n# Example with rolling log file\n#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n\n# Example with rolling log file and tracing\n#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n\n#\n# Log INFO level and above messages to the console\n#\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=INFO\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n#\n# Add ROLLINGFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\nlog4j.appender.ROLLINGFILE.Threshold=DEBUG\nlog4j.appender.ROLLINGFILE.File=zookeeper.log\n\n# Max log file size of 10MB\nlog4j.appender.ROLLINGFILE.MaxFileSize=10MB\n# uncomment the next line to limit number of backup files\n#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n\nlog4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n\n#\n# Add TRACEFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.TRACEFILE=org.apache.log4j.FileAppender\nlog4j.appender.TRACEFILE.Threshold=TRACE\nlog4j.appender.TRACEFILE.File=zookeeper_trace.log\n\nlog4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n### Notice we are including log4j's NDC here (%x)\nlog4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n"
                },
                "properties_attributes": {}
            }
        },
        {
            "hbase-log4j": {
                "properties": {
                    "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# Define some default values that can be overridden by system properties\nhbase.root.logger=INFO,console\nhbase.security.logger=INFO,console\nhbase.log.dir=.\nhbase.log.file=hbase.log\n\n# Define the root logger to the system property \"hbase.root.logger\".\nlog4j.rootLogger=${hbase.root.logger}\n\n# Logging Threshold\nlog4j.threshold=ALL\n\n#\n# Daily Rolling File Appender\n#\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hbase.log.dir}/${hbase.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Rolling File Appender properties\nhbase.log.maxfilesize=256MB\nhbase.log.maxbackupindex=20\n\n# Rolling File Appender\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hbase.log.dir}/${hbase.log.file}\n\nlog4j.appender.RFA.MaxFileSize=${hbase.log.maxfilesize}\nlog4j.appender.RFA.MaxBackupIndex=${hbase.log.maxbackupindex}\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n#\n# Security audit appender\n#\nhbase.security.log.file=SecurityAuth.audit\nhbase.security.log.maxfilesize=256MB\nhbase.security.log.maxbackupindex=20\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hbase.log.dir}/${hbase.security.log.file}\nlog4j.appender.RFAS.MaxFileSize=${hbase.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hbase.security.log.maxbackupindex}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.category.SecurityLogger=${hbase.security.logger}\nlog4j.additivity.SecurityLogger=false\n#log4j.logger.SecurityLogger.org.apache.hadoop.hbase.security.access.AccessController=TRACE\n\n#\n# Null Appender\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Custom Logging levels\n\nlog4j.logger.org.apache.zookeeper=INFO\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.hbase=INFO\n# Make these two classes INFO-level. Make them DEBUG to see more zk debug.\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZKUtil=INFO\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher=INFO\n#log4j.logger.org.apache.hadoop.dfs=DEBUG\n# Set this class to log INFO only otherwise its OTT\n# Enable this to get detailed connection error/retry logging.\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=TRACE\n\n\n# Uncomment this line to enable tracing on _every_ RPC call (this can be a lot of output)\n#log4j.logger.org.apache.hadoop.ipc.HBaseServer.trace=DEBUG\n\n# Uncomment the below if you want to remove logging of client region caching'\n# and scan of .META. messages\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=INFO\n# log4j.logger.org.apache.hadoop.hbase.client.MetaScanner=INFO"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hdfs-policymgr-ssl": {
                "properties": {
                    "xasecure.policymgr.clientssl.keystore": "/usr/hdp/current/hadoop-client/conf/ranger-plugin-keystore.jks",
                    "xasecure.policymgr.clientssl.keystore.credential.file": "jceks://file{{credential_file}}",
                    "xasecure.policymgr.clientssl.truststore": "/usr/hdp/current/hadoop-client/conf/ranger-plugin-truststore.jks",
                    "xasecure.policymgr.clientssl.truststore.credential.file": "jceks://file{{credential_file}}"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hbase-security": {
                "properties": {
                    "ranger.plugin.hbase.policy.cache.dir": "/etc/ranger/{{repo_name}}/policycache",
                    "ranger.plugin.hbase.policy.pollIntervalMs": "30000",
                    "ranger.plugin.hbase.policy.rest.ssl.config.file": "/etc/hbase/conf/ranger-policymgr-ssl.xml",
                    "ranger.plugin.hbase.policy.rest.url": "{{policymgr_mgr_url}}",
                    "ranger.plugin.hbase.policy.source.impl": "org.apache.ranger.admin.client.RangerAdminRESTClient",
                    "ranger.plugin.hbase.service.name": "{{repo_name}}",
                    "xasecure.hbase.update.xapolicies.on.grant.revoke": "true"
                },
                "properties_attributes": {}
            }
        },
        {
            "hbase-site": {
                "properties": {
                    "dfs.domain.socket.path": "/var/lib/hadoop-hdfs/dn_socket",
                    "hbase.bucketcache.ioengine": "",
                    "hbase.bucketcache.percentage.in.combinedcache": "",
                    "hbase.bucketcache.size": "",
                    "hbase.bulkload.staging.dir": "/apps/hbase/staging",
                    "hbase.client.keyvalue.maxsize": "1048576",
                    "hbase.client.retries.number": "35",
                    "hbase.client.scanner.caching": "100",
                    "hbase.cluster.distributed": "true",
                    "hbase.coprocessor.master.classes": "",
                    "hbase.coprocessor.region.classes": "org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint",
                    "hbase.defaults.for.version.skip": "true",
                    "hbase.hregion.majorcompaction": "604800000",
                    "hbase.hregion.majorcompaction.jitter": "0.50",
                    "hbase.hregion.max.filesize": "10737418240",
                    "hbase.hregion.memstore.block.multiplier": "4",
                    "hbase.hregion.memstore.flush.size": "134217728",
                    "hbase.hregion.memstore.mslab.enabled": "true",
                    "hbase.hstore.blockingStoreFiles": "10",
                    "hbase.hstore.compaction.max": "10",
                    "hbase.hstore.compactionThreshold": "3",
                    "hbase.local.dir": "${hbase.tmp.dir}/local",
                    "hbase.master.info.bindAddress": "0.0.0.0",
                    "hbase.master.info.port": "60010",
                    "hbase.master.ipc.address": "0.0.0.0",
                    "hbase.master.port": "60000",
                    "hbase.region.server.rpc.scheduler.factory.class": "",
                    "hbase.regionserver.global.memstore.size": "0.4",
                    "hbase.regionserver.handler.count": "30",
                    "hbase.regionserver.info.port": "60030",
                    "hbase.regionserver.port": "60020",
                    "hbase.regionserver.wal.codec": "org.apache.hadoop.hbase.regionserver.wal.WALCellCodec",
                    "hbase.rootdir": "hdfs://HDFSHA:8020/apps/hbase/data",
                    "hbase.rpc.controllerfactory.class": "",
                    "hbase.rpc.protection": "authentication",
                    "hbase.rpc.timeout": "90000",
                    "hbase.security.authentication": "simple",
                    "hbase.security.authorization": "false",
                    "hbase.superuser": "hbase",
                    "hbase.tmp.dir": "/grid/hadoop/hbase",
                    "hbase.zookeeper.property.clientPort": "2181",
                    "hbase.zookeeper.quorum": "%HOSTGROUP::host_group_zk_1%:2181,%HOSTGROUP::host_group_zk_2%:2181",
                    "hbase.zookeeper.useMulti": "true",
                    "hfile.block.cache.size": "0.40",
                    "phoenix.functions.allowUserDefinedFunctions": " ",
                    "phoenix.query.timeoutMs": "60000",
                    "zookeeper.session.timeout": "120000",
                    "zookeeper.znode.parent": "/hbase-unsecure"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-yarn-policymgr-ssl": {
                "properties": {
                    "xasecure.policymgr.clientssl.keystore": "/usr/hdp/current/hadoop-client/conf/ranger-yarn-plugin-keystore.jks",
                    "xasecure.policymgr.clientssl.keystore.credential.file": "jceks://file{{credential_file}}",
                    "xasecure.policymgr.clientssl.truststore": "/usr/hdp/current/hadoop-client/conf/ranger-yarn-plugin-truststore.jks",
                    "xasecure.policymgr.clientssl.truststore.credential.file": "jceks://file{{credential_file}}"
                },
                "properties_attributes": {}
            }
        },
        {
            "ssl-server": {
                "properties": {
                    "ssl.server.keystore.location": "/etc/security/serverKeys/keystore.jks",
                    "ssl.server.keystore.type": "jks",
                    "ssl.server.truststore.location": "/etc/security/serverKeys/all.jks",
                    "ssl.server.truststore.reload.interval": "10000",
                    "ssl.server.truststore.type": "jks"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-yarn-security": {
                "properties": {
                    "ranger.plugin.yarn.policy.cache.dir": "/etc/ranger/{{repo_name}}/policycache",
                    "ranger.plugin.yarn.policy.pollIntervalMs": "30000",
                    "ranger.plugin.yarn.policy.rest.ssl.config.file": "/etc/hadoop/conf/ranger-policymgr-ssl-yarn.xml",
                    "ranger.plugin.yarn.policy.rest.url": "{{policymgr_mgr_url}}",
                    "ranger.plugin.yarn.policy.source.impl": "org.apache.ranger.admin.client.RangerAdminRESTClient",
                    "ranger.plugin.yarn.service.name": "{{repo_name}}"
                },
                "properties_attributes": {}
            }
        },
        {
            "hadoop-policy": {
                "properties": {
                    "security.admin.operations.protocol.acl": "hadoop",
                    "security.client.datanode.protocol.acl": "*",
                    "security.client.protocol.acl": "*",
                    "security.datanode.protocol.acl": "*",
                    "security.inter.datanode.protocol.acl": "*",
                    "security.inter.tracker.protocol.acl": "*",
                    "security.job.client.protocol.acl": "*",
                    "security.job.task.protocol.acl": "*",
                    "security.namenode.protocol.acl": "*",
                    "security.refresh.policy.protocol.acl": "hadoop",
                    "security.refresh.usertogroups.mappings.protocol.acl": "hadoop"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-yarn-audit": {
                "properties": {
                    "xasecure.audit.credential.provider.file": "jceks://file{{credential_file}}",
                    "xasecure.audit.destination.db": "false",
                    "xasecure.audit.destination.db.batch.filespool.dir": "/var/log/hadoop/yarn/audit/db/spool",
                    "xasecure.audit.destination.db.jdbc.driver": "{{jdbc_driver}}",
                    "xasecure.audit.destination.db.jdbc.url": "{{audit_jdbc_url}}",
                    "xasecure.audit.destination.db.user": "{{xa_audit_db_user}}",
                    "xasecure.audit.destination.hdfs": "true",
                    "xasecure.audit.destination.hdfs.batch.filespool.dir": "/var/log/hadoop/yarn/audit/hdfs/spool",
                    "xasecure.audit.destination.hdfs.dir": "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit",
                    "xasecure.audit.destination.solr": "false",
                    "xasecure.audit.destination.solr.batch.filespool.dir": "/var/log/hadoop/yarn/audit/solr/spool",
                    "xasecure.audit.destination.solr.urls": "{{ranger_audit_solr_urls}}",
                    "xasecure.audit.destination.solr.zookeepers": "none",
                    "xasecure.audit.is.enabled": "true",
                    "xasecure.audit.provider.summary.enabled": "false"
                },
                "properties_attributes": {}
            }
        },
        {
            "core-site": {
                "properties": {
                    "fs.defaultFS": "hdfs://HDFSHA",
                    "fs.trash.interval": "360",
                    "ha.failover-controller.active-standby-elector.zk.op.retries": "120",
                    "ha.zookeeper.quorum": "%HOSTGROUP::host_group_zk_2%:2181,%HOSTGROUP::host_group_zk_1%:2181",
                    "hadoop.http.authentication.simple.anonymous.allowed": "true",
                    "hadoop.proxyuser.hbase.groups": "users",
                    "hadoop.proxyuser.hbase.hosts": "*",
                    "hadoop.proxyuser.hdfs.groups": "*",
                    "hadoop.proxyuser.hdfs.hosts": "*",
                    "hadoop.security.auth_to_local": "DEFAULT",
                    "hadoop.security.authentication": "simple",
                    "hadoop.security.authorization": "false",
                    "hadoop.security.key.provider.path": "",
                    "io.compression.codecs": "org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.SnappyCodec",
                    "io.file.buffer.size": "131072",
                    "io.serializations": "org.apache.hadoop.io.serializer.WritableSerialization",
                    "ipc.client.connect.max.retries": "50",
                    "ipc.client.connection.maxidletime": "30000",
                    "ipc.client.idlethreshold": "8000",
                    "ipc.server.tcpnodelay": "true",
                    "mapreduce.jobtracker.webinterface.trusted": "false",
                    "net.topology.script.file.name": "/etc/hadoop/conf/topology_script.py"
                },
                "properties_attributes": {}
            }
        },
        {
            "hdfs-site": {
                "properties": {
                    "dfs.block.access.token.enable": "true",
                    "dfs.blockreport.initialDelay": "120",
                    "dfs.blocksize": "134217728",
                    "dfs.client.failover.proxy.provider.HDFSHA": "org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider",
                    "dfs.client.read.shortcircuit": "true",
                    "dfs.client.read.shortcircuit.streams.cache.size": "4096",
                    "dfs.client.retry.policy.enabled": "false",
                    "dfs.cluster.administrators": " hdfs",
                    "dfs.content-summary.limit": "5000",
                    "dfs.datanode.address": "0.0.0.0:50010",
                    "dfs.datanode.balance.bandwidthPerSec": "6250000",
                    "dfs.datanode.data.dir": "/grid/0/hadoop/hdfs/data,/grid/1/hadoop/hdfs/data",
                    "dfs.datanode.data.dir.perm": "750",
                    "dfs.datanode.du.reserved": "1073741824",
                    "dfs.datanode.failed.volumes.tolerated": "0",
                    "dfs.datanode.http.address": "0.0.0.0:50075",
                    "dfs.datanode.https.address": "0.0.0.0:50475",
                    "dfs.datanode.ipc.address": "0.0.0.0:8010",
                    "dfs.datanode.max.transfer.threads": "16384",
                    "dfs.domain.socket.path": "/var/lib/hadoop-hdfs/dn_socket",
                    "dfs.encrypt.data.transfer.cipher.suites": "AES/CTR/NoPadding",
                    "dfs.encryption.key.provider.uri": "",
                    "dfs.ha.automatic-failover.enabled": "true",
                    "dfs.ha.fencing.methods": "shell(/bin/true)",
                    "dfs.ha.namenodes.HDFSHA": "nn1,nn2",
                    "dfs.heartbeat.interval": "3",
                    "dfs.hosts.exclude": "/etc/hadoop/conf/dfs.exclude",
                    "dfs.http.policy": "HTTP_ONLY",
                    "dfs.https.port": "50470",
                    "dfs.journalnode.edits.dir": "/grid/hadoop/hdfs/journal",
                    "dfs.journalnode.http-address": "0.0.0.0:8480",
                    "dfs.journalnode.https-address": "0.0.0.0:8481",
                    "dfs.namenode.accesstime.precision": "0",
                    "dfs.namenode.audit.log.async": "true",
                    "dfs.namenode.avoid.read.stale.datanode": "true",
                    "dfs.namenode.avoid.write.stale.datanode": "true",
                    "dfs.namenode.checkpoint.dir": "/grid/hadoop/hdfs/namesecondary",
                    "dfs.namenode.checkpoint.edits.dir": "${dfs.namenode.checkpoint.dir}",
                    "dfs.namenode.checkpoint.period": "21600",
                    "dfs.namenode.checkpoint.txns": "1000000",
                    "dfs.namenode.fslock.fair": "false",
                    "dfs.namenode.handler.count": "100",
                    "dfs.namenode.http-address": "%HOSTGROUP::host_group_namenode_passive%:50070",
                    "dfs.namenode.http-address.HDFSHA.nn1": "%HOSTGROUP::host_group_namenode_active%:50070",
                    "dfs.namenode.http-address.HDFSHA.nn2": "%HOSTGROUP::host_group_namenode_passive%:50070",
                    "dfs.namenode.https-address": "%HOSTGROUP::host_group_namenode_passive%:50470",
                    "dfs.namenode.https-address.HDFSHA.nn1": "%HOSTGROUP::host_group_namenode_active%:50470",
                    "dfs.namenode.https-address.HDFSHA.nn2": "%HOSTGROUP::host_group_namenode_passive%:50470",
                    "dfs.namenode.name.dir": "/grid/hadoop/hdfs/namenode",
                    "dfs.namenode.name.dir.restore": "true",
                    "dfs.namenode.rpc-address": "%HOSTGROUP::host_group_namenode_passive%:8020",
                    "dfs.namenode.rpc-address.HDFSHA.nn1": "%HOSTGROUP::host_group_namenode_active%:8020",
                    "dfs.namenode.rpc-address.HDFSHA.nn2": "%HOSTGROUP::host_group_namenode_passive%:8020",
                    "dfs.namenode.safemode.threshold-pct": "0.99f",
                    "dfs.namenode.shared.edits.dir": "qjournal://%HOSTGROUP::host_group_zk_1%:2181,%HOSTGROUP::host_group_zk_2%:2181;%HOSTGROUP::host_group_zk_2%:8485/HDFSHA",
                    "dfs.namenode.stale.datanode.interval": "30000",
                    "dfs.namenode.startup.delay.block.deletion.sec": "3600",
                    "dfs.namenode.write.stale.datanode.ratio": "1.0f",
                    "dfs.nameservices": "HDFSHA",
                    "dfs.permissions.enabled": "true",
                    "dfs.permissions.superusergroup": "hdfs",
                    "dfs.replication": "3",
                    "dfs.replication.max": "50",
                    "dfs.support.append": "true",
                    "dfs.webhdfs.enabled": "true",
                    "fs.permissions.umask-mode": "022",
                    "nfs.exports.allowed.hosts": "* rw",
                    "nfs.file.dump.dir": "/tmp/.hdfs-nfs"
                },
                "properties_attributes": {}
            }
        },
        {
            "kafka-broker": {
                "properties": {
                    "auto.create.topics.enable": "true",
                    "auto.leader.rebalance.enable": "true",
                    "compression.type": "producer",
                    "controlled.shutdown.enable": "true",
                    "controlled.shutdown.max.retries": "3",
                    "controlled.shutdown.retry.backoff.ms": "5000",
                    "controller.message.queue.size": "10",
                    "controller.socket.timeout.ms": "30000",
                    "default.replication.factor": "1",
                    "delete.topic.enable": "true",
                    "external.kafka.metrics.exclude.prefix": "kafka.network.RequestMetrics,kafka.server.DelayedOperationPurgatory,kafka.server.BrokerTopicMetrics.BytesRejectedPerSec",
                    "external.kafka.metrics.include.prefix": "kafka.network.RequestMetrics.ResponseQueueTimeMs.request.OffsetCommit.98percentile,kafka.network.RequestMetrics.ResponseQueueTimeMs.request.Offsets.95percentile,kafka.network.RequestMetrics.ResponseSendTimeMs.request.Fetch.95percentile,kafka.network.RequestMetrics.RequestsPerSec.request",
                    "fetch.purgatory.purge.interval.requests": "10000",
                    "kafka.ganglia.metrics.group": "kafka",
                    "kafka.ganglia.metrics.port": "8671",
                    "kafka.ganglia.metrics.reporter.enabled": "true",
                    "kafka.metrics.reporters": "{{kafka_metrics_reporters}}",
                    "kafka.timeline.metrics.host": "{{metric_collector_host}}",
                    "kafka.timeline.metrics.maxRowCacheSize": "10000",
                    "kafka.timeline.metrics.port": "{{metric_collector_port}}",
                    "kafka.timeline.metrics.reporter.enabled": "true",
                    "kafka.timeline.metrics.reporter.sendInterval": "5900",
                    "leader.imbalance.check.interval.seconds": "300",
                    "leader.imbalance.per.broker.percentage": "10",
                    "listeners": "PLAINTEXT://localhost:6667",
                    "log.cleanup.interval.mins": "10",
                    "log.dirs": "/grid/kafka-logs",
                    "log.index.interval.bytes": "4096",
                    "log.index.size.max.bytes": "10485760",
                    "log.retention.bytes": "-1",
                    "log.retention.hours": "168",
                    "log.roll.hours": "168",
                    "log.segment.bytes": "1073741824",
                    "message.max.bytes": "5000000",
                    "min.insync.replicas": "1",
                    "num.io.threads": "8",
                    "num.network.threads": "3",
                    "num.partitions": "1",
                    "num.recovery.threads.per.data.dir": "1",
                    "num.replica.fetchers": "1",
                    "offset.metadata.max.bytes": "4096",
                    "offsets.commit.required.acks": "-1",
                    "offsets.commit.timeout.ms": "5000",
                    "offsets.load.buffer.size": "5242880",
                    "offsets.retention.check.interval.ms": "600000",
                    "offsets.retention.minutes": "86400000",
                    "offsets.topic.compression.codec": "0",
                    "offsets.topic.num.partitions": "50",
                    "offsets.topic.replication.factor": "3",
                    "offsets.topic.segment.bytes": "104857600",
                    "producer.purgatory.purge.interval.requests": "10000",
                    "queued.max.requests": "500",
                    "replica.fetch.max.bytes": "5242880",
                    "replica.fetch.min.bytes": "1",
                    "replica.fetch.wait.max.ms": "500",
                    "replica.high.watermark.checkpoint.interval.ms": "5000",
                    "replica.lag.max.messages": "4000",
                    "replica.lag.time.max.ms": "10000",
                    "replica.socket.receive.buffer.bytes": "65536",
                    "replica.socket.timeout.ms": "30000",
                    "socket.receive.buffer.bytes": "102400",
                    "socket.request.max.bytes": "104857600",
                    "socket.send.buffer.bytes": "102400",
                    "zookeeper.connect": "%HOSTGROUP::host_group_zk_1%:2181,%HOSTGROUP::host_group_zk_2%:2181",
                    "zookeeper.connection.timeout.ms": "25000",
                    "zookeeper.session.timeout.ms": "30000",
                    "zookeeper.sync.time.ms": "2000"
                },
                "properties_attributes": {}
            }
        },
        {
            "yarn-site": {
                "properties": {
                    "hadoop.registry.rm.enabled": "false",
                    "hadoop.registry.zk.quorum": "%HOSTGROUP::host_group_zk_1%:2181,%HOSTGROUP::host_group_zk_2%:2181",
                    "yarn.acl.enable": "false",
                    "yarn.admin.acl": "yarn",
                    "yarn.application.classpath": "$HADOOP_CONF_DIR,/usr/hdp/current/hadoop-client/*,/usr/hdp/current/hadoop-client/lib/*,/usr/hdp/current/hadoop-hdfs-client/*,/usr/hdp/current/hadoop-hdfs-client/lib/*,/usr/hdp/current/hadoop-yarn-client/*,/usr/hdp/current/hadoop-yarn-client/lib/*",
                    "yarn.client.nodemanager-connect.max-wait-ms": "60000",
                    "yarn.client.nodemanager-connect.retry-interval-ms": "10000",
                    "yarn.http.policy": "HTTP_ONLY",
                    "yarn.log-aggregation-enable": "true",
                    "yarn.log-aggregation.retain-seconds": "2592000",
                    "yarn.node-labels.enabled": "false",
                    "yarn.node-labels.fs-store.retry-policy-spec": "2000, 500",
                    "yarn.node-labels.fs-store.root-dir": "/system/yarn/node-labels",
                    "yarn.nodemanager.address": "0.0.0.0:45454",
                    "yarn.nodemanager.admin-env": "MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX",
                    "yarn.nodemanager.aux-services": "mapreduce_shuffle",
                    "yarn.nodemanager.aux-services.mapreduce_shuffle.class": "org.apache.hadoop.mapred.ShuffleHandler",
                    "yarn.nodemanager.bind-host": "0.0.0.0",
                    "yarn.nodemanager.container-executor.class": "org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor",
                    "yarn.nodemanager.container-monitor.interval-ms": "3000",
                    "yarn.nodemanager.delete.debug-delay-sec": "0",
                    "yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage": "90",
                    "yarn.nodemanager.disk-health-checker.min-free-space-per-disk-mb": "1000",
                    "yarn.nodemanager.disk-health-checker.min-healthy-disks": "0.25",
                    "yarn.nodemanager.health-checker.interval-ms": "135000",
                    "yarn.nodemanager.health-checker.script.timeout-ms": "60000",
                    "yarn.nodemanager.linux-container-executor.cgroups.hierarchy": "hadoop-yarn",
                    "yarn.nodemanager.linux-container-executor.cgroups.mount": "false",
                    "yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage": "false",
                    "yarn.nodemanager.linux-container-executor.group": "hadoop",
                    "yarn.nodemanager.linux-container-executor.resources-handler.class": "org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler",
                    "yarn.nodemanager.local-dirs": "/grid/0/hadoop/yarn/local,/grid/1/hadoop/yarn/local",
                    "yarn.nodemanager.log-aggregation.compression-type": "gz",
                    "yarn.nodemanager.log-aggregation.debug-enabled": "false",
                    "yarn.nodemanager.log-aggregation.num-log-files-per-app": "30",
                    "yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds": "-1",
                    "yarn.nodemanager.log-dirs": "/grid/0/hadoop/yarn/log,/grid/1/hadoop/yarn/log",
                    "yarn.nodemanager.log.retain-second": "604800",
                    "yarn.nodemanager.recovery.dir": "{{yarn_log_dir_prefix}}/nodemanager/recovery-state",
                    "yarn.nodemanager.recovery.enabled": "true",
                    "yarn.nodemanager.remote-app-log-dir": "/app-logs",
                    "yarn.nodemanager.remote-app-log-dir-suffix": "logs",
                    "yarn.nodemanager.resource.cpu-vcores": "3",
                    "yarn.nodemanager.resource.memory-mb": "1024",
                    "yarn.nodemanager.resource.percentage-physical-cpu-limit": "80",
                    "yarn.nodemanager.vmem-check-enabled": "false",
                    "yarn.nodemanager.vmem-pmem-ratio": "2.1",
                    "yarn.resourcemanager.address": "%HOSTGROUP::host_group_namenode_active%:8050",
                    "yarn.resourcemanager.admin.address": "%HOSTGROUP::host_group_zk_1%:8141",
                    "yarn.resourcemanager.am.max-attempts": "2",
                    "yarn.resourcemanager.bind-host": "0.0.0.0",
                    "yarn.resourcemanager.cluster-id": "yarn-cluster",
                    "yarn.resourcemanager.connect.max-wait.ms": "900000",
                    "yarn.resourcemanager.connect.retry-interval.ms": "30000",
                    "yarn.resourcemanager.fs.state-store.retry-policy-spec": "2000, 500",
                    "yarn.resourcemanager.fs.state-store.uri": " ",
                    "yarn.resourcemanager.ha.automatic-failover.zk-base-path": "/yarn-leader-election",
                    "yarn.resourcemanager.ha.enabled": "true",
                    "yarn.resourcemanager.ha.rm-ids": "rm1,rm2",
                    "yarn.resourcemanager.hostname": "%HOSTGROUP::host_group_namenode_active%",
                    "yarn.resourcemanager.hostname.rm1": "%HOSTGROUP::host_group_namenode_passive%",
                    "yarn.resourcemanager.hostname.rm2": "%HOSTGROUP::host_group_zk_1%",
                    "yarn.resourcemanager.nodes.exclude-path": "/etc/hadoop/conf/yarn.exclude",
                    "yarn.resourcemanager.recovery.enabled": "true",
                    "yarn.resourcemanager.resource-tracker.address.rm1": "%HOSTGROUP::host_group_namenode_passive%:8025",
                    "yarn.resourcemanager.resource-tracker.address.rm2": "%HOSTGROUP::host_group_zk_1%:8025",
                    "yarn.resourcemanager.scheduler.address": "%HOSTGROUP::host_group_zk_1%:8030",
                    "yarn.resourcemanager.scheduler.class": "org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler",
                    "yarn.resourcemanager.scheduler.monitor.enable": "false",
                    "yarn.resourcemanager.state-store.max-completed-applications": "${yarn.resourcemanager.max-completed-applications}",
                    "yarn.resourcemanager.store.class": "org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore",
                    "yarn.resourcemanager.system-metrics-publisher.dispatcher.pool-size": "10",
                    "yarn.resourcemanager.system-metrics-publisher.enabled": "true",
                    "yarn.resourcemanager.webapp.address": "%HOSTGROUP::host_group_zk_1%:8088",
                    "yarn.resourcemanager.webapp.address.rm1": "%HOSTGROUP::host_group_namenode_passive%:8088",
                    "yarn.resourcemanager.webapp.address.rm2": "%HOSTGROUP::host_group_zk_1%:8088",
                    "yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled": "false",
                    "yarn.resourcemanager.webapp.https.address": "%HOSTGROUP::host_group_zk_1%:8090",
                    "yarn.resourcemanager.webapp.https.address.rm1": "%HOSTGROUP::host_group_namenode_passive%:8090",
                    "yarn.resourcemanager.webapp.https.address.rm2": "%HOSTGROUP::host_group_zk_1%:8090",
                    "yarn.resourcemanager.work-preserving-recovery.enabled": "true",
                    "yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms": "10000",
                    "yarn.resourcemanager.zk-acl": "world:anyone:rwcda",
                    "yarn.resourcemanager.zk-address": "%HOSTGROUP::host_group_zk_1%:2181,%HOSTGROUP::host_group_zk_2%:2181",
                    "yarn.resourcemanager.zk-num-retries": "1000",
                    "yarn.resourcemanager.zk-retry-interval-ms": "1000",
                    "yarn.resourcemanager.zk-state-store.parent-path": "/rmstore",
                    "yarn.resourcemanager.zk-timeout-ms": "10000",
                    "yarn.scheduler.maximum-allocation-mb": "1024",
                    "yarn.scheduler.maximum-allocation-vcores": "3",
                    "yarn.scheduler.minimum-allocation-mb": "256",
                    "yarn.scheduler.minimum-allocation-vcores": "1",
                    "yarn.timeline-service.bind-host": "0.0.0.0",
                    "yarn.timeline-service.client.max-retries": "30",
                    "yarn.timeline-service.client.retry-interval-ms": "1000",
                    "yarn.timeline-service.enabled": "true",
                    "yarn.timeline-service.generic-application-history.store-class": "org.apache.hadoop.yarn.server.applicationhistoryservice.NullApplicationHistoryStore",
                    "yarn.timeline-service.http-authentication.simple.anonymous.allowed": "true",
                    "yarn.timeline-service.http-authentication.type": "simple",
                    "yarn.timeline-service.leveldb-state-store.path": "/grid/hadoop/yarn/timeline",
                    "yarn.timeline-service.leveldb-timeline-store.path": "/grid/hadoop/yarn/timeline",
                    "yarn.timeline-service.leveldb-timeline-store.read-cache-size": "104857600",
                    "yarn.timeline-service.leveldb-timeline-store.start-time-read-cache-size": "10000",
                    "yarn.timeline-service.leveldb-timeline-store.start-time-write-cache-size": "10000",
                    "yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms": "300000",
                    "yarn.timeline-service.recovery.enabled": "true",
                    "yarn.timeline-service.state-store-class": "org.apache.hadoop.yarn.server.timeline.recovery.LeveldbTimelineStateStore",
                    "yarn.timeline-service.store-class": "org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore",
                    "yarn.timeline-service.ttl-enable": "true",
                    "yarn.timeline-service.ttl-ms": "2678400000"
                },
                "properties_attributes": {}
            }
        },
        {
            "tez-env": {
                "properties": {
                    "content": "\n# Tez specific configuration\nexport TEZ_CONF_DIR={{config_dir}}\n\n# Set HADOOP_HOME to point to a specific hadoop install directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# The java implementation to use.\nexport JAVA_HOME={{java64_home}}\n    ",
                    "tez_user": "tez"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-hbase-security-site": {
                "properties": {
                    "ams.zookeeper.keytab": "",
                    "ams.zookeeper.principal": "",
                    "hadoop.security.authentication": "",
                    "hbase.coprocessor.master.classes": "",
                    "hbase.coprocessor.region.classes": "",
                    "hbase.master.kerberos.principal": "",
                    "hbase.master.keytab.file": "",
                    "hbase.myclient.keytab": "",
                    "hbase.myclient.principal": "",
                    "hbase.regionserver.kerberos.principal": "",
                    "hbase.regionserver.keytab.file": "",
                    "hbase.security.authentication": "",
                    "hbase.security.authorization": "",
                    "hbase.zookeeper.property.authProvider.1": "",
                    "hbase.zookeeper.property.jaasLoginRenew": "",
                    "hbase.zookeeper.property.kerberos.removeHostFromPrincipal": "",
                    "hbase.zookeeper.property.kerberos.removeRealmFromPrincipal": "",
                    "zookeeper.znode.parent": ""
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-yarn-plugin-properties": {
                "properties": {
                    "REPOSITORY_CONFIG_USERNAME": "yarn",
                    "common.name.for.certificate": "",
                    "hadoop.rpc.protection": "",
                    "policy_user": "ambari-qa",
                    "ranger-yarn-plugin-enabled": "No"
                },
                "properties_attributes": {}
            }
        },
        {
            "storm-env": {
                "properties": {
                    "content": "\n#!/bin/bash\n\n# Set Storm specific environment variables here.\n\n# The java implementation to use.\nexport JAVA_HOME={{java64_home}}\n\nexport STORM_CONF_DIR={{conf_dir}}\nexport STORM_HOME={{storm_component_home_dir}}",
                    "jmxremote_port": "56431",
                    "nimbus_seeds_supported": "true",
                    "storm_log_dir": "/var/log/storm",
                    "storm_pid_dir": "/var/run/storm",
                    "storm_user": "storm"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-kafka-audit": {
                "properties": {},
                "properties_attributes": {}
            }
        },
        {
            "yarn-env": {
                "properties": {
                    "apptimelineserver_heapsize": "1024",
                    "content": "\n      export HADOOP_YARN_HOME={{hadoop_yarn_home}}\n      export YARN_LOG_DIR={{yarn_log_dir_prefix}}/$USER\n      export YARN_PID_DIR={{yarn_pid_dir_prefix}}/$USER\n      export HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n      export JAVA_HOME={{java64_home}}\n      export JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"\n\n      # We need to add the EWMA appender for the yarn daemons only;\n      # however, YARN_ROOT_LOGGER is shared by the yarn client and the\n      # daemons. This is restrict the EWMA appender to daemons only.\n      INVOKER=\"${0##*/}\"\n      if [ \"$INVOKER\" == \"yarn-daemon.sh\" ]; then\n        export YARN_ROOT_LOGGER=${YARN_ROOT_LOGGER:-INFO,EWMA,RFA}\n      fi\n\n      # User for YARN daemons\n      export HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}\n\n      # resolve links - $0 may be a softlink\n      export YARN_CONF_DIR=\"${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}\"\n\n      # some Java parameters\n      # export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n      if [ \"$JAVA_HOME\" != \"\" ]; then\n      #echo \"run java in $JAVA_HOME\"\n      JAVA_HOME=$JAVA_HOME\n      fi\n\n      if [ \"$JAVA_HOME\" = \"\" ]; then\n      echo \"Error: JAVA_HOME is not set.\"\n      exit 1\n      fi\n\n      JAVA=$JAVA_HOME/bin/java\n      JAVA_HEAP_MAX=-Xmx1000m\n\n      # For setting YARN specific HEAP sizes please use this\n      # Parameter and set appropriately\n      YARN_HEAPSIZE={{yarn_heapsize}}\n\n      # check envvars which might override default args\n      if [ \"$YARN_HEAPSIZE\" != \"\" ]; then\n      JAVA_HEAP_MAX=\"-Xmx\"\"$YARN_HEAPSIZE\"\"m\"\n      fi\n\n      # Resource Manager specific parameters\n\n      # Specify the max Heapsize for the ResourceManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1000.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_RESOURCEMANAGER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}\n\n      # Specify the JVM options to be used when starting the ResourceManager.\n      # These options will be appended to the options specified as YARN_OPTS\n      # and therefore may override any similar flags set in YARN_OPTS\n      #export YARN_RESOURCEMANAGER_OPTS=\n\n      # Node Manager specific parameters\n\n      # Specify the max Heapsize for the NodeManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1000.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_NODEMANAGER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}\n\n      # Specify the max Heapsize for the HistoryManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1024.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_HISTORYSERVER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_HISTORYSERVER_HEAPSIZE={{apptimelineserver_heapsize}}\n\n      # Specify the JVM options to be used when starting the NodeManager.\n      # These options will be appended to the options specified as YARN_OPTS\n      # and therefore may override any similar flags set in YARN_OPTS\n      #export YARN_NODEMANAGER_OPTS=\n\n      # so that filenames w/ spaces are handled correctly in loops below\n      IFS=\n\n\n      # default log directory and file\n      if [ \"$YARN_LOG_DIR\" = \"\" ]; then\n      YARN_LOG_DIR=\"$HADOOP_YARN_HOME/logs\"\n      fi\n      if [ \"$YARN_LOGFILE\" = \"\" ]; then\n      YARN_LOGFILE='yarn.log'\n      fi\n\n      # default policy file for service-level authorization\n      if [ \"$YARN_POLICYFILE\" = \"\" ]; then\n      YARN_POLICYFILE=\"hadoop-policy.xml\"\n      fi\n\n      # restore ordinary behaviour\n      unset IFS\n\n\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR\"\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING\"\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\n      if [ \"x$JAVA_LIBRARY_PATH\" != \"x\" ]; then\n      YARN_OPTS=\"$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH\"\n      fi\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}\"",
                    "is_supported_yarn_ranger": "true",
                    "min_user_id": "500",
                    "nodemanager_heapsize": "1024",
                    "resourcemanager_heapsize": "1024",
                    "yarn_cgroups_enabled": "false",
                    "yarn_heapsize": "1024",
                    "yarn_log_dir_prefix": "/var/log/hadoop-yarn",
                    "yarn_pid_dir_prefix": "/var/run/hadoop-yarn",
                    "yarn_user": "yarn",
                    "yarn_user_nofile_limit": "32768",
                    "yarn_user_nproc_limit": "65536"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hdfs-audit": {
                "properties": {
                    "xasecure.audit.credential.provider.file": "jceks://file{{credential_file}}",
                    "xasecure.audit.destination.db": "false",
                    "xasecure.audit.destination.db.batch.filespool.dir": "/var/log/hadoop/hdfs/audit/db/spool",
                    "xasecure.audit.destination.db.jdbc.driver": "{{jdbc_driver}}",
                    "xasecure.audit.destination.db.jdbc.url": "{{audit_jdbc_url}}",
                    "xasecure.audit.destination.db.user": "{{xa_audit_db_user}}",
                    "xasecure.audit.destination.hdfs": "true",
                    "xasecure.audit.destination.hdfs.batch.filespool.dir": "/var/log/hadoop/hdfs/audit/hdfs/spool",
                    "xasecure.audit.destination.hdfs.dir": "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit",
                    "xasecure.audit.destination.solr": "false",
                    "xasecure.audit.destination.solr.batch.filespool.dir": "/var/log/hadoop/hdfs/audit/solr/spool",
                    "xasecure.audit.destination.solr.urls": "{{ranger_audit_solr_urls}}",
                    "xasecure.audit.destination.solr.zookeepers": "none",
                    "xasecure.audit.is.enabled": "true",
                    "xasecure.audit.provider.summary.enabled": "false"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hdfs-plugin-properties": {
                "properties": {
                    "REPOSITORY_CONFIG_USERNAME": "hadoop",
                    "common.name.for.certificate": "",
                    "hadoop.rpc.protection": "",
                    "policy_user": "ambari-qa",
                    "ranger-hdfs-plugin-enabled": "No"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-storm-plugin-properties": {
                "properties": {
                    "REPOSITORY_CONFIG_USERNAME": "stormtestuser@EXAMPLE.COM",
                    "common.name.for.certificate": "",
                    "policy_user": "storm",
                    "ranger-storm-plugin-enabled": "No"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-storm-policymgr-ssl": {
                "properties": {
                    "xasecure.policymgr.clientssl.keystore": "/usr/hdp/current/storm-client/conf/ranger-plugin-keystore.jks",
                    "xasecure.policymgr.clientssl.keystore.credential.file": "jceks://file{{credential_file}}",
                    "xasecure.policymgr.clientssl.truststore": "/usr/hdp/current/storm-client/conf/ranger-plugin-truststore.jks",
                    "xasecure.policymgr.clientssl.truststore.credential.file": "jceks://file{{credential_file}}"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-kafka-policymgr-ssl": {
                "properties": {},
                "properties_attributes": {}
            }
        },
        {
            "ranger-storm-security": {
                "properties": {
                    "ranger.plugin.storm.policy.cache.dir": "/etc/ranger/{{repo_name}}/policycache",
                    "ranger.plugin.storm.policy.pollIntervalMs": "30000",
                    "ranger.plugin.storm.policy.rest.ssl.config.file": "/usr/hdp/current/storm-client/conf/ranger-policymgr-ssl.xml",
                    "ranger.plugin.storm.policy.rest.url": "{{policymgr_mgr_url}}",
                    "ranger.plugin.storm.policy.source.impl": "org.apache.ranger.admin.client.RangerAdminRESTClient",
                    "ranger.plugin.storm.service.name": "{{repo_name}}"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-env": {
                "properties": {
                    "ambari_metrics_user": "ams",
                    "content": "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# Collector Log directory for log4j\nexport AMS_COLLECTOR_LOG_DIR={{ams_collector_log_dir}}\n\n# Monitor Log directory for outfile\nexport AMS_MONITOR_LOG_DIR={{ams_monitor_log_dir}}\n\n# Collector pid directory\nexport AMS_COLLECTOR_PID_DIR={{ams_collector_pid_dir}}\n\n# Monitor pid directory\nexport AMS_MONITOR_PID_DIR={{ams_monitor_pid_dir}}\n\n# AMS HBase pid directory\nexport AMS_HBASE_PID_DIR={{hbase_pid_dir}}\n\n# AMS Collector heapsize\nexport AMS_COLLECTOR_HEAPSIZE={{metrics_collector_heapsize}}\n\n# AMS Collector options\nexport AMS_COLLECTOR_OPTS=\"-Djava.library.path=/usr/lib/ams-hbase/lib/hadoop-native\"\n{% if security_enabled %}\nexport AMS_COLLECTOR_OPTS=\"$AMS_COLLECTOR_OPTS -Djava.security.auth.login.config={{ams_collector_jaas_config_file}} -Dzookeeper.sasl.client.username={{zk_servicename}}\"\n{% endif %}",
                    "metrics_collector_heapsize": "760m",
                    "metrics_collector_log_dir": "/var/log/ambari-metrics-collector",
                    "metrics_collector_pid_dir": "/var/run/ambari-metrics-collector",
                    "metrics_monitor_log_dir": "/var/log/ambari-metrics-monitor",
                    "metrics_monitor_pid_dir": "/var/run/ambari-metrics-monitor"
                },
                "properties_attributes": {}
            }
        },
        {
            "hbase-policy": {
                "properties": {
                    "security.admin.protocol.acl": "*",
                    "security.client.protocol.acl": "*",
                    "security.masterregion.protocol.acl": "*"
                },
                "properties_attributes": {}
            }
        },
        {
            "capacity-scheduler": {
                "properties": {
                    "yarn.scheduler.capacity.default.minimum-user-limit-percent": "100",
                    "yarn.scheduler.capacity.maximum-am-resource-percent": "0.2",
                    "yarn.scheduler.capacity.maximum-applications": "10000",
                    "yarn.scheduler.capacity.node-locality-delay": "40",
                    "yarn.scheduler.capacity.resource-calculator": "org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator",
                    "yarn.scheduler.capacity.root.accessible-node-labels": "*",
                    "yarn.scheduler.capacity.root.acl_administer_queue": "*",
                    "yarn.scheduler.capacity.root.capacity": "100",
                    "yarn.scheduler.capacity.root.default.acl_administer_jobs": "*",
                    "yarn.scheduler.capacity.root.default.acl_submit_applications": "*",
                    "yarn.scheduler.capacity.root.default.capacity": "100",
                    "yarn.scheduler.capacity.root.default.maximum-capacity": "100",
                    "yarn.scheduler.capacity.root.default.state": "RUNNING",
                    "yarn.scheduler.capacity.root.default.user-limit-factor": "1",
                    "yarn.scheduler.capacity.root.queues": "default"
                },
                "properties_attributes": {}
            }
        },
        {
            "hbase-env": {
                "properties": {
                    "content": "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# HBase Configuration directory\nexport HBASE_CONF_DIR=${HBASE_CONF_DIR:-{{hbase_conf_dir}}}\n\n# Extra Java CLASSPATH elements. Optional.\nexport HBASE_CLASSPATH=${HBASE_CLASSPATH}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\n# export HBASE_HEAPSIZE=1000\n\n# Extra Java runtime options.\n# Below are what we set by default. May only work with SUN JVM.\n# For more on why as well as other possible settings,\n# see http://wiki.apache.org/hadoop/PerformanceTuning\nexport SERVER_GC_OPTS=\"-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{log_dir}}/gc.log-`date +'%Y%m%d%H%M'`\"\n# Uncomment below to enable java garbage collection logging.\n# export HBASE_OPTS=\"$HBASE_OPTS -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$HBASE_HOME/logs/gc-hbase.log\"\n\n# Uncomment and adjust to enable JMX exporting\n# See jmxremote.password and jmxremote.access in $JRE_HOME/lib/management to configure remote password access.\n# More details at: http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html\n#\n# export HBASE_JMX_BASE=\"-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n# If you want to configure BucketCache, specify '-XX: MaxDirectMemorySize=' with proper direct memory size\n# export HBASE_THRIFT_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10103\"\n# export HBASE_ZOOKEEPER_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104\"\n\n# File naming hosts on which HRegionServers will run. $HBASE_HOME/conf/regionservers by default.\nexport HBASE_REGIONSERVERS=${HBASE_CONF_DIR}/regionservers\n\n# Extra ssh options. Empty by default.\n# export HBASE_SSH_OPTS=\"-o ConnectTimeout=1 -o SendEnv=HBASE_CONF_DIR\"\n\n# Where log files are stored. $HBASE_HOME/logs by default.\nexport HBASE_LOG_DIR={{log_dir}}\n\n# A string representing this instance of hbase. $USER by default.\n# export HBASE_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes. See 'man nice'.\n# export HBASE_NICENESS=10\n\n# The directory where pid files are stored. /tmp by default.\nexport HBASE_PID_DIR={{pid_dir}}\n\n# Seconds to sleep between slave commands. Unset by default. This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HBASE_SLAVE_SLEEP=0.1\n\n# Tell HBase whether it should manage it's own instance of Zookeeper or not.\nexport HBASE_MANAGES_ZK=false\n\n{% if java_version < 8 %}\nJDK_DEPENDED_OPTS=\"-XX:PermSize=128m -XX:MaxPermSize=128m\"\n{% endif %}      \n      \n{% if security_enabled %}\nexport HBASE_OPTS=\"$HBASE_OPTS -XX:+UseConcMarkSweepGC -XX:ErrorFile={{log_dir}}/hs_err_pid%p.log -Djava.security.auth.login.config={{client_jaas_config_file}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Xmx{{master_heapsize}} -Djava.security.auth.login.config={{master_jaas_config_file}} $JDK_DEPENDED_OPTS\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70  -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}} {% if hbase_max_direct_memory_size %} -XX:MaxDirectMemorySize={{hbase_max_direct_memory_size}}m {% endif %} -Djava.security.auth.login.config={{regionserver_jaas_config_file}} $JDK_DEPENDED_OPTS\"\nexport PHOENIX_QUERYSERVER_OPTS=\"$PHOENIX_QUERYSERVER_OPTS -Djava.security.auth.login.config={{queryserver_jaas_config_file}}\"\n{% else %}\nexport HBASE_OPTS=\"$HBASE_OPTS -XX:+UseConcMarkSweepGC -XX:ErrorFile={{log_dir}}/hs_err_pid%p.log\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Xmx{{master_heapsize}} $JDK_DEPENDED_OPTS\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70  -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}} {% if hbase_max_direct_memory_size %} -XX:MaxDirectMemorySize={{hbase_max_direct_memory_size}}m {% endif %} $JDK_DEPENDED_OPTS\"\n{% endif %}",
                    "hbase_log_dir": "/var/log/hbase",
                    "hbase_master_heapsize": "2048m",
                    "hbase_max_direct_memory_size": "",
                    "hbase_pid_dir": "/var/run/hbase",
                    "hbase_regionserver_heapsize": "2048m",
                    "hbase_regionserver_xmn_max": "512",
                    "hbase_regionserver_xmn_ratio": "0.2",
                    "hbase_user": "hbase",
                    "phoenix_sql_enabled": "false"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-site": {
                "properties": {
                    "phoenix.query.maxGlobalMemoryPercentage": "25",
                    "phoenix.spool.directory": "/tmp",
                    "timeline.metrics.aggregator.checkpoint.dir": "/var/lib/ambari-metrics-collector/checkpoint",
                    "timeline.metrics.cluster.aggregate.splitpoints": "kafka.network.RequestMetrics.RequestsPerSec.request.ConsumerMetadata.5MinuteRate,master.Server.averageLoad",
                    "timeline.metrics.cluster.aggregator.daily.checkpointCutOffMultiplier": "1",
                    "timeline.metrics.cluster.aggregator.daily.disabled": "false",
                    "timeline.metrics.cluster.aggregator.daily.interval": "86400",
                    "timeline.metrics.cluster.aggregator.daily.ttl": "63072000",
                    "timeline.metrics.cluster.aggregator.hourly.checkpointCutOffMultiplier": "2",
                    "timeline.metrics.cluster.aggregator.hourly.disabled": "false",
                    "timeline.metrics.cluster.aggregator.hourly.interval": "3600",
                    "timeline.metrics.cluster.aggregator.hourly.ttl": "31536000",
                    "timeline.metrics.cluster.aggregator.minute.checkpointCutOffMultiplier": "2",
                    "timeline.metrics.cluster.aggregator.minute.disabled": "false",
                    "timeline.metrics.cluster.aggregator.minute.interval": "120",
                    "timeline.metrics.cluster.aggregator.minute.timeslice.interval": "30",
                    "timeline.metrics.cluster.aggregator.minute.ttl": "2592000",
                    "timeline.metrics.daily.aggregator.minute.interval": "86400",
                    "timeline.metrics.hbase.compression.scheme": "SNAPPY",
                    "timeline.metrics.hbase.data.block.encoding": "FAST_DIFF",
                    "timeline.metrics.host.aggregate.splitpoints": "kafka.network.RequestMetrics.RequestsPerSec.request.StopReplica.count,kafka.controller.ControllerStats.LeaderElectionRateAndTimeMs.99percentile,dfs.FSNamesystem.CapacityTotalGB,dfs.namenode.GetLinkTargetOps,jvm.JvmMetrics.MemMaxM,master.FileSystem.HlogSplitTime_max,metricssystem.MetricsSystem.NumActiveSinks,regionserver.Server.Append_median,regionserver.Server.mutationsWithoutWALCount,rpcdetailed.rpcdetailed.HeartbeatNumOps",
                    "timeline.metrics.host.aggregator.daily.checkpointCutOffMultiplier": "1",
                    "timeline.metrics.host.aggregator.daily.disabled": "false",
                    "timeline.metrics.host.aggregator.daily.ttl": "31536000",
                    "timeline.metrics.host.aggregator.hourly.checkpointCutOffMultiplier": "2",
                    "timeline.metrics.host.aggregator.hourly.disabled": "false",
                    "timeline.metrics.host.aggregator.hourly.interval": "3600",
                    "timeline.metrics.host.aggregator.hourly.ttl": "2592000",
                    "timeline.metrics.host.aggregator.minute.checkpointCutOffMultiplier": "2",
                    "timeline.metrics.host.aggregator.minute.disabled": "false",
                    "timeline.metrics.host.aggregator.minute.interval": "120",
                    "timeline.metrics.host.aggregator.minute.ttl": "604800",
                    "timeline.metrics.host.aggregator.ttl": "86400",
                    "timeline.metrics.service.checkpointDelay": "60",
                    "timeline.metrics.service.cluster.aggregator.appIds": "datanode,nodemanager,hbase",
                    "timeline.metrics.service.default.result.limit": "5760",
                    "timeline.metrics.service.operation.mode": "embedded",
                    "timeline.metrics.service.resultset.fetchSize": "2000",
                    "timeline.metrics.service.rpc.address": "0.0.0.0:60200",
                    "timeline.metrics.service.use.groupBy.aggregators": "true",
                    "timeline.metrics.service.webapp.address": "0.0.0.0:6188",
                    "timeline.metrics.sink.collection.period": "60",
                    "timeline.metrics.sink.report.interval": "60"
                },
                "properties_attributes": {}
            }
        },
        {
            "mapred-site": {
                "properties": {
                    "mapreduce.admin.map.child.java.opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}",
                    "mapreduce.admin.reduce.child.java.opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}",
                    "mapreduce.admin.user.env": "LD_LIBRARY_PATH=/usr/hdp/${hdp.version}/hadoop/lib/native:/usr/hdp/${hdp.version}/hadoop/lib/native/Linux-amd64-64",
                    "mapreduce.am.max-attempts": "2",
                    "mapreduce.application.classpath": "$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/hdp/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure",
                    "mapreduce.application.framework.path": "/hdp/apps/${hdp.version}/mapreduce/mapreduce.tar.gz#mr-framework",
                    "mapreduce.cluster.administrators": " hadoop",
                    "mapreduce.framework.name": "yarn",
                    "mapreduce.job.counters.max": "130",
                    "mapreduce.job.emit-timeline-data": "false",
                    "mapreduce.job.reduce.slowstart.completedmaps": "0.05",
                    "mapreduce.jobhistory.bind-host": "0.0.0.0",
                    "mapreduce.jobhistory.done-dir": "/mr-history/done",
                    "mapreduce.jobhistory.intermediate-done-dir": "/mr-history/tmp",
                    "mapreduce.jobhistory.recovery.enable": "true",
                    "mapreduce.jobhistory.recovery.store.class": "org.apache.hadoop.mapreduce.v2.hs.HistoryServerLeveldbStateStoreService",
                    "mapreduce.jobhistory.recovery.store.leveldb.path": "/grid/hadoop/mapreduce/jhs",
                    "mapreduce.map.java.opts": "-Xmx409m",
                    "mapreduce.map.log.level": "INFO",
                    "mapreduce.map.memory.mb": "512",
                    "mapreduce.map.output.compress": "false",
                    "mapreduce.map.sort.spill.percent": "0.7",
                    "mapreduce.map.speculative": "false",
                    "mapreduce.output.fileoutputformat.compress": "false",
                    "mapreduce.output.fileoutputformat.compress.type": "BLOCK",
                    "mapreduce.reduce.input.buffer.percent": "0.0",
                    "mapreduce.reduce.java.opts": "-Xmx819m",
                    "mapreduce.reduce.log.level": "INFO",
                    "mapreduce.reduce.memory.mb": "1024",
                    "mapreduce.reduce.shuffle.fetch.retry.enabled": "1",
                    "mapreduce.reduce.shuffle.fetch.retry.interval-ms": "1000",
                    "mapreduce.reduce.shuffle.fetch.retry.timeout-ms": "30000",
                    "mapreduce.reduce.shuffle.input.buffer.percent": "0.7",
                    "mapreduce.reduce.shuffle.merge.percent": "0.66",
                    "mapreduce.reduce.shuffle.parallelcopies": "30",
                    "mapreduce.reduce.speculative": "false",
                    "mapreduce.shuffle.port": "13562",
                    "mapreduce.task.io.sort.factor": "100",
                    "mapreduce.task.io.sort.mb": "286",
                    "mapreduce.task.timeout": "300000",
                    "yarn.app.mapreduce.am.admin-command-opts": "-Dhdp.version=${hdp.version}",
                    "yarn.app.mapreduce.am.command-opts": "-Xmx409m -Dhdp.version=${hdp.version}",
                    "yarn.app.mapreduce.am.log.level": "INFO",
                    "yarn.app.mapreduce.am.resource.mb": "512",
                    "yarn.app.mapreduce.am.staging-dir": "/user"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-storm-audit": {
                "properties": {
                    "xasecure.audit.credential.provider.file": "jceks://file{{credential_file}}",
                    "xasecure.audit.destination.db": "false",
                    "xasecure.audit.destination.db.batch.filespool.dir": "/var/log/storm/audit/db/spool",
                    "xasecure.audit.destination.db.jdbc.driver": "{{jdbc_driver}}",
                    "xasecure.audit.destination.db.jdbc.url": "{{audit_jdbc_url}}",
                    "xasecure.audit.destination.db.user": "{{xa_audit_db_user}}",
                    "xasecure.audit.destination.hdfs": "true",
                    "xasecure.audit.destination.hdfs.batch.filespool.dir": "/var/log/storm/audit/hdfs/spool",
                    "xasecure.audit.destination.hdfs.dir": "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit",
                    "xasecure.audit.destination.solr": "false",
                    "xasecure.audit.destination.solr.batch.filespool.dir": "/var/log/storm/audit/solr/spool",
                    "xasecure.audit.destination.solr.urls": "{{ranger_audit_solr_urls}}",
                    "xasecure.audit.destination.solr.zookeepers": "none",
                    "xasecure.audit.is.enabled": "true",
                    "xasecure.audit.provider.summary.enabled": "false"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hbase-policymgr-ssl": {
                "properties": {
                    "xasecure.policymgr.clientssl.keystore": "/usr/hdp/current/hbase-client/conf/ranger-plugin-keystore.jks",
                    "xasecure.policymgr.clientssl.keystore.credential.file": "jceks://file{{credential_file}}",
                    "xasecure.policymgr.clientssl.truststore": "/usr/hdp/current/hbase-client/conf/ranger-plugin-truststore.jks",
                    "xasecure.policymgr.clientssl.truststore.credential.file": "jceks://file{{credential_file}}"
                },
                "properties_attributes": {}
            }
        },
        {
            "hdfs-log4j": {
                "properties": {
                    "content": "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n\n# Define some default values that can be overridden by system properties\n# To change daemon root logger use hadoop_root_logger in hadoop-env\nhadoop.root.logger=INFO,console\nhadoop.log.dir=.\nhadoop.log.file=hadoop.log\n\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hadoop.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=ALL\n\n#\n# Daily Rolling File Appender\n#\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#\n# TaskLog Appender\n#\n\n#Default values\nhadoop.tasklog.taskid=null\nhadoop.tasklog.iscleanup=false\nhadoop.tasklog.noKeepSplits=4\nhadoop.tasklog.totalLogFileSize=100\nhadoop.tasklog.purgeLogSplits=true\nhadoop.tasklog.logsRetainHours=12\n\nlog4j.appender.TLA=org.apache.hadoop.mapred.TaskLogAppender\nlog4j.appender.TLA.taskId=${hadoop.tasklog.taskid}\nlog4j.appender.TLA.isCleanup=${hadoop.tasklog.iscleanup}\nlog4j.appender.TLA.totalLogFileSize=${hadoop.tasklog.totalLogFileSize}\n\nlog4j.appender.TLA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.TLA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n#\n#Security audit appender\n#\nhadoop.security.logger=INFO,console\nhadoop.security.log.maxfilesize=256MB\nhadoop.security.log.maxbackupindex=20\nlog4j.category.SecurityLogger=${hadoop.security.logger}\nhadoop.security.log.file=SecurityAuth.audit\nlog4j.appender.DRFAS=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.DRFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.DRFAS.DatePattern=.yyyy-MM-dd\n\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}\n\n#\n# hdfs audit logging\n#\nhdfs.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}\nlog4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false\nlog4j.appender.DRFAAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log\nlog4j.appender.DRFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.DRFAAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# NameNode metrics logging.\n# The default is to retain two namenode-metrics.log files up to 64MB each.\n#\nnamenode.metrics.logger=INFO,NullAppender\nlog4j.logger.NameNodeMetricsLog=${namenode.metrics.logger}\nlog4j.additivity.NameNodeMetricsLog=false\nlog4j.appender.NNMETRICSRFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.NNMETRICSRFA.File=${hadoop.log.dir}/namenode-metrics.log\nlog4j.appender.NNMETRICSRFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.NNMETRICSRFA.layout.ConversionPattern=%d{ISO8601} %m%n\nlog4j.appender.NNMETRICSRFA.MaxBackupIndex=1\nlog4j.appender.NNMETRICSRFA.MaxFileSize=64MB\n\n#\n# mapred audit logging\n#\nmapred.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.mapred.AuditLogger=${mapred.audit.logger}\nlog4j.additivity.org.apache.hadoop.mapred.AuditLogger=false\nlog4j.appender.MRAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.MRAUDIT.File=${hadoop.log.dir}/mapred-audit.log\nlog4j.appender.MRAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MRAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.MRAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# Rolling File Appender\n#\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Logfile size and and 30-day backups\nlog4j.appender.RFA.MaxFileSize=256MB\nlog4j.appender.RFA.MaxBackupIndex=10\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} - %m%n\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n# Custom Logging levels\n\nhadoop.metrics.log.level=INFO\n#log4j.logger.org.apache.hadoop.mapred.JobTracker=DEBUG\n#log4j.logger.org.apache.hadoop.mapred.TaskTracker=DEBUG\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.metrics2=${hadoop.metrics.log.level}\n\n# Jets3t library\nlog4j.logger.org.jets3t.service.impl.rest.httpclient.RestS3Service=ERROR\n\n#\n# Null Appender\n# Trap security logger on the hadoop client side\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n# Removes \"deprecated\" messages\nlog4j.logger.org.apache.hadoop.conf.Configuration.deprecation=WARN\n\n#\n# HDFS block state change log from block manager\n#\n# Uncomment the following to suppress normal block state change\n# messages from BlockManager in NameNode.\n#log4j.logger.BlockStateChange=WARN"
                },
                "properties_attributes": {}
            }
        },
        {
            "kafka-log4j": {
                "properties": {
                    "content": "#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\nkafka.logs.dir=logs\nlog4j.rootLogger=INFO, stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n#log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.kafkaAppender=org.apache.log4j.FileAppender\n#log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n#log4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.stateChangeAppender=org.apache.log4j.FileAppender\n#log4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n#log4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.requestAppender=org.apache.log4j.FileAppender\n#log4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n#log4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.cleanerAppender=org.apache.log4j.FileAppender\n#log4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n#log4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.controllerAppender=org.apache.log4j.FileAppender\n#log4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n# Turn on all our debugging info\n#log4j.logger.kafka.producer.async.DefaultEventHandler=DEBUG, kafkaAppender\n#log4j.logger.kafka.client.ClientUtils=DEBUG, kafkaAppender\n#log4j.logger.kafka.perf=DEBUG, kafkaAppender\n#log4j.logger.kafka.perf.ProducerPerformance$ProducerThread=DEBUG, kafkaAppender\n#log4j.logger.org.I0Itec.zkclient.ZkClient=DEBUG\nlog4j.logger.kafka=INFO, kafkaAppender\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\nlog4j.additivity.kafka.network.RequestChannel$=false\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\n#log4j.additivity.kafka.server.KafkaApis=false\nlog4j.logger.kafka.request.logger=WARN, requestAppender\nlog4j.additivity.kafka.request.logger=false\nlog4j.logger.kafka.controller=TRACE, controllerAppender\nlog4j.additivity.kafka.controller=false\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\nlog4j.additivity.kafka.log.LogCleaner=false\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\nlog4j.additivity.state.change.logger=false"
                },
                "properties_attributes": {}
            }
        },
        {
            "kafka-env": {
                "properties": {
                    "content": "\n#!/bin/bash\n\n# Set KAFKA specific environment variables here.\n\n# The java implementation to use.\nexport JAVA_HOME={{java64_home}}\nexport PATH=$PATH:$JAVA_HOME/bin\nexport PID_DIR={{kafka_pid_dir}}\nexport LOG_DIR={{kafka_log_dir}}\nexport KAFKA_KERBEROS_PARAMS={{kafka_kerberos_params}}\n# Add kafka sink to classpath and related depenencies\nif [ -e \"/usr/lib/ambari-metrics-kafka-sink/ambari-metrics-kafka-sink.jar\" ]; then\n  export CLASSPATH=$CLASSPATH:/usr/lib/ambari-metrics-kafka-sink/ambari-metrics-kafka-sink.jar\n  export CLASSPATH=$CLASSPATH:/usr/lib/ambari-metrics-kafka-sink/lib/*\nfi\nif [ -f /etc/kafka/conf/kafka-ranger-env.sh ]; then\n. /etc/kafka/conf/kafka-ranger-env.sh\nfi",
                    "is_supported_kafka_ranger": "true",
                    "kafka_log_dir": "/var/log/kafka",
                    "kafka_pid_dir": "/var/run/kafka",
                    "kafka_user": "kafka"
                },
                "properties_attributes": {}
            }
        },
        {
            "tez-site": {
                "properties": {
                    "tez.am.am-rm.heartbeat.interval-ms.max": "250",
                    "tez.am.container.idle.release-timeout-max.millis": "20000",
                    "tez.am.container.idle.release-timeout-min.millis": "10000",
                    "tez.am.container.reuse.enabled": "true",
                    "tez.am.container.reuse.locality.delay-allocation-millis": "250",
                    "tez.am.container.reuse.non-local-fallback.enabled": "false",
                    "tez.am.container.reuse.rack-fallback.enabled": "true",
                    "tez.am.launch.cluster-default.cmd-opts": "-server -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}",
                    "tez.am.launch.cmd-opts": "-XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps -XX:+UseNUMA -XX:+UseParallelGC",
                    "tez.am.launch.env": "LD_LIBRARY_PATH=/usr/hdp/${hdp.version}/hadoop/lib/native:/usr/hdp/${hdp.version}/hadoop/lib/native/Linux-amd64-64",
                    "tez.am.log.level": "INFO",
                    "tez.am.max.app.attempts": "2",
                    "tez.am.maxtaskfailures.per.node": "10",
                    "tez.am.resource.memory.mb": "1536",
                    "tez.am.tez-ui.history-url.template": "__HISTORY_URL_BASE__?viewPath=%2F%23%2Ftez-app%2F__APPLICATION_ID__",
                    "tez.am.view-acls": "*",
                    "tez.cluster.additional.classpath.prefix": "/usr/hdp/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure",
                    "tez.counters.max": "2000",
                    "tez.counters.max.groups": "1000",
                    "tez.generate.debug.artifacts": "false",
                    "tez.grouping.max-size": "1073741824",
                    "tez.grouping.min-size": "16777216",
                    "tez.grouping.split-waves": "1.7",
                    "tez.history.logging.service.class": "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService",
                    "tez.lib.uris": "/hdp/apps/${hdp.version}/tez/tez.tar.gz",
                    "tez.runtime.compress": "true",
                    "tez.runtime.compress.codec": "org.apache.hadoop.io.compress.SnappyCodec",
                    "tez.runtime.convert.user-payload.to.history-text": "false",
                    "tez.runtime.io.sort.mb": "272",
                    "tez.runtime.optimize.local.fetch": "true",
                    "tez.runtime.pipelined.sorter.sort.threads": "2",
                    "tez.runtime.sorter.class": "PIPELINED",
                    "tez.runtime.unordered.output.buffer.size-mb": "100",
                    "tez.session.am.dag.submit.timeout.secs": "300",
                    "tez.session.client.timeout.secs": "-1",
                    "tez.shuffle-vertex-manager.max-src-fraction": "0.4",
                    "tez.shuffle-vertex-manager.min-src-fraction": "0.2",
                    "tez.staging-dir": "/tmp/${user.name}/staging",
                    "tez.task.am.heartbeat.counter.interval-ms.max": "4000",
                    "tez.task.generate.counters.per.io": "true",
                    "tez.task.get-task.sleep.interval-ms.max": "200",
                    "tez.task.launch.cluster-default.cmd-opts": "-server -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}",
                    "tez.task.launch.cmd-opts": "-XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps -XX:+UseNUMA -XX:+UseParallelGC",
                    "tez.task.launch.env": "LD_LIBRARY_PATH=/usr/hdp/${hdp.version}/hadoop/lib/native:/usr/hdp/${hdp.version}/hadoop/lib/native/Linux-amd64-64",
                    "tez.task.max-events-per-heartbeat": "500",
                    "tez.task.resource.memory.mb": "512",
                    "tez.use.cluster.hadoop-libs": "false"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-hbase-env": {
                "properties": {
                    "content": "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# HBase Configuration directory\nexport HBASE_CONF_DIR=${HBASE_CONF_DIR:-{{hbase_conf_dir}}}\n\n# Extra Java CLASSPATH elements. Optional.\nexport HBASE_CLASSPATH=${HBASE_CLASSPATH}\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nexport HBASE_HEAPSIZE={{hbase_heapsize}}\n\n# Extra Java runtime options.\n# Below are what we set by default. May only work with SUN JVM.\n# For more on why as well as other possible settings,\n# see http://wiki.apache.org/hadoop/PerformanceTuning\nexport HBASE_OPTS=\"-XX:+UseConcMarkSweepGC -XX:ErrorFile={{hbase_log_dir}}/hs_err_pid%p.log -Djava.io.tmpdir={{hbase_tmp_dir}}\"\nexport SERVER_GC_OPTS=\"-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{hbase_log_dir}}/gc.log-`date +'%Y%m%d%H%M'`\"\n# Uncomment below to enable java garbage collection logging.\n# export HBASE_OPTS=\"$HBASE_OPTS -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$HBASE_HOME/logs/gc-hbase.log\"\n\n# Uncomment and adjust to enable JMX exporting\n# See jmxremote.password and jmxremote.access in $JRE_HOME/lib/management to configure remote password access.\n# More details at: http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html\n#\n# export HBASE_JMX_BASE=\"-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n\n{% if java_version < 8 %}\nexport HBASE_MASTER_OPTS=\" -XX:PermSize=64m -XX:MaxPermSize={{hbase_master_maxperm_size}} -Xms{{hbase_heapsize}} -Xmx{{hbase_heapsize}} -Xmn{{hbase_master_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly\"\nexport HBASE_REGIONSERVER_OPTS=\"-XX:MaxPermSize=128m -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}}\"\n{% else %}\nexport HBASE_MASTER_OPTS=\" -Xms{{hbase_heapsize}} -Xmx{{hbase_heapsize}} -Xmn{{hbase_master_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly\"\nexport HBASE_REGIONSERVER_OPTS=\" -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}}\"\n{% endif %}\n\n\n# export HBASE_THRIFT_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10103\"\n# export HBASE_ZOOKEEPER_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104\"\n\n# File naming hosts on which HRegionServers will run. $HBASE_HOME/conf/regionservers by default.\nexport HBASE_REGIONSERVERS=${HBASE_CONF_DIR}/regionservers\n\n# Extra ssh options. Empty by default.\n# export HBASE_SSH_OPTS=\"-o ConnectTimeout=1 -o SendEnv=HBASE_CONF_DIR\"\n\n# Where log files are stored. $HBASE_HOME/logs by default.\nexport HBASE_LOG_DIR={{hbase_log_dir}}\n\n# A string representing this instance of hbase. $USER by default.\n# export HBASE_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes. See 'man nice'.\n# export HBASE_NICENESS=10\n\n# The directory where pid files are stored. /tmp by default.\nexport HBASE_PID_DIR={{hbase_pid_dir}}\n\n# Seconds to sleep between slave commands. Unset by default. This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HBASE_SLAVE_SLEEP=0.1\n\n# Tell HBase whether it should manage it's own instance of Zookeeper or not.\nexport HBASE_MANAGES_ZK=false\n\n{% if security_enabled %}\nexport HBASE_OPTS=\"$HBASE_OPTS -Djava.security.auth.login.config={{client_jaas_config_file}} -Dzookeeper.sasl.client.username={{zk_servicename}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Djava.security.auth.login.config={{master_jaas_config_file}} -Dzookeeper.sasl.client.username={{zk_servicename}}\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Djava.security.auth.login.config={{regionserver_jaas_config_file}} -Dzookeeper.sasl.client.username={{zk_servicename}}\"\nexport HBASE_ZOOKEEPER_OPTS=\"$HBASE_ZOOKEEPER_OPTS -Djava.security.auth.login.config={{ams_zookeeper_jaas_config_file}} -Dzookeeper.sasl.client.username={{zk_servicename}}\"\n{% endif %}\n\n# use embedded native libs\n_HADOOP_NATIVE_LIB=\"/usr/lib/ams-hbase/lib/hadoop-native/\"\nexport HBASE_OPTS=\"$HBASE_OPTS -Djava.library.path=${_HADOOP_NATIVE_LIB}\"\n\n# Unset HADOOP_HOME to avoid importing HADOOP installed cluster related configs like: /usr/hdp/2.2.0.0-2041/hadoop/conf/\nexport HADOOP_HOME={{ams_hbase_home_dir}}",
                    "hbase_log_dir": "/var/log/ambari-metrics-collector",
                    "hbase_master_heapsize": "6737m",
                    "hbase_master_maxperm_size": "128m",
                    "hbase_master_xmn_size": "512m",
                    "hbase_pid_dir": "/var/run/ambari-metrics-collector/",
                    "hbase_regionserver_heapsize": "512m",
                    "hbase_regionserver_xmn_ratio": "0.2",
                    "max_open_files_limit": "32768",
                    "regionserver_xmn_size": "256m"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-log4j": {
                "properties": {
                    "content": "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Define some default values that can be overridden by system properties\nams.log.dir=.\nams.log.file=ambari-metrics-collector.log\n\n# Root logger option\nlog4j.rootLogger=INFO,file\n\n# Direct log messages to a log file\nlog4j.appender.file=org.apache.log4j.RollingFileAppender\nlog4j.appender.file.File=${ams.log.dir}/${ams.log.file}\nlog4j.appender.file.MaxFileSize=80MB\nlog4j.appender.file.MaxBackupIndex=60\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-hbase-log4j": {
                "properties": {
                    "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# Define some default values that can be overridden by system properties\nhbase.root.logger=INFO,console\nhbase.security.logger=INFO,console\nhbase.log.dir=.\nhbase.log.file=hbase.log\n\n# Define the root logger to the system property \"hbase.root.logger\".\nlog4j.rootLogger=${hbase.root.logger}\n\n# Logging Threshold\nlog4j.threshold=ALL\n\n#\n# Daily Rolling File Appender\n#\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hbase.log.dir}/${hbase.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Rolling File Appender properties\nhbase.log.maxfilesize=256MB\nhbase.log.maxbackupindex=20\n\n# Rolling File Appender\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hbase.log.dir}/${hbase.log.file}\n\nlog4j.appender.RFA.MaxFileSize=${hbase.log.maxfilesize}\nlog4j.appender.RFA.MaxBackupIndex=${hbase.log.maxbackupindex}\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n#\n# Security audit appender\n#\nhbase.security.log.file=SecurityAuth.audit\nhbase.security.log.maxfilesize=256MB\nhbase.security.log.maxbackupindex=20\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hbase.log.dir}/${hbase.security.log.file}\nlog4j.appender.RFAS.MaxFileSize=${hbase.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hbase.security.log.maxbackupindex}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.category.SecurityLogger=${hbase.security.logger}\nlog4j.additivity.SecurityLogger=false\n#log4j.logger.SecurityLogger.org.apache.hadoop.hbase.security.access.AccessController=TRACE\n\n#\n# Null Appender\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Custom Logging levels\n\nlog4j.logger.org.apache.zookeeper=INFO\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.hbase=INFO\n# Make these two classes INFO-level. Make them DEBUG to see more zk debug.\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZKUtil=INFO\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher=INFO\n#log4j.logger.org.apache.hadoop.dfs=DEBUG\n# Set this class to log INFO only otherwise its OTT\n# Enable this to get detailed connection error/retry logging.\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=TRACE\n\n\n# Uncomment this line to enable tracing on _every_ RPC call (this can be a lot of output)\n#log4j.logger.org.apache.hadoop.ipc.HBaseServer.trace=DEBUG\n\n# Uncomment the below if you want to remove logging of client region caching'\n# and scan of .META. messages\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=INFO\n# log4j.logger.org.apache.hadoop.hbase.client.MetaScanner=INFO"
                },
                "properties_attributes": {}
            }
        },
        {
            "ssl-client": {
                "properties": {
                    "ssl.client.keystore.location": "/etc/security/clientKeys/keystore.jks",
                    "ssl.client.keystore.type": "jks",
                    "ssl.client.truststore.location": "/etc/security/clientKeys/all.jks",
                    "ssl.client.truststore.reload.interval": "10000",
                    "ssl.client.truststore.type": "jks"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hbase-audit": {
                "properties": {
                    "xasecure.audit.credential.provider.file": "jceks://file{{credential_file}}",
                    "xasecure.audit.destination.db": "false",
                    "xasecure.audit.destination.db.batch.filespool.dir": "/var/log/hbase/audit/db/spool",
                    "xasecure.audit.destination.db.jdbc.driver": "{{jdbc_driver}}",
                    "xasecure.audit.destination.db.jdbc.url": "{{audit_jdbc_url}}",
                    "xasecure.audit.destination.db.user": "{{xa_audit_db_user}}",
                    "xasecure.audit.destination.hdfs": "true",
                    "xasecure.audit.destination.hdfs.batch.filespool.dir": "/var/log/hbase/audit/hdfs/spool",
                    "xasecure.audit.destination.hdfs.dir": "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit",
                    "xasecure.audit.destination.solr": "false",
                    "xasecure.audit.destination.solr.batch.filespool.dir": "/var/log/hbase/audit/solr/spool",
                    "xasecure.audit.destination.solr.urls": "{{ranger_audit_solr_urls}}",
                    "xasecure.audit.destination.solr.zookeepers": "none",
                    "xasecure.audit.is.enabled": "true",
                    "xasecure.audit.provider.summary.enabled": "true"
                },
                "properties_attributes": {}
            }
        },
        {
            "ams-hbase-policy": {
                "properties": {
                    "security.admin.protocol.acl": "*",
                    "security.client.protocol.acl": "*",
                    "security.masterregion.protocol.acl": "*"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hbase-plugin-properties": {
                "properties": {
                    "REPOSITORY_CONFIG_USERNAME": "hbase",
                    "common.name.for.certificate": "",
                    "policy_user": "ambari-qa",
                    "ranger-hbase-plugin-enabled": "No"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-hdfs-security": {
                "properties": {
                    "ranger.plugin.hdfs.policy.cache.dir": "/etc/ranger/{{repo_name}}/policycache",
                    "ranger.plugin.hdfs.policy.pollIntervalMs": "30000",
                    "ranger.plugin.hdfs.policy.rest.ssl.config.file": "/etc/hadoop/conf/ranger-policymgr-ssl.xml",
                    "ranger.plugin.hdfs.policy.rest.url": "{{policymgr_mgr_url}}",
                    "ranger.plugin.hdfs.policy.source.impl": "org.apache.ranger.admin.client.RangerAdminRESTClient",
                    "ranger.plugin.hdfs.service.name": "{{repo_name}}",
                    "xasecure.add-hadoop-authorization": "true"
                },
                "properties_attributes": {}
            }
        },
        {
            "ranger-kafka-plugin-properties": {
                "properties": {},
                "properties_attributes": {}
            }
        },
        {
            "ranger-kafka-security": {
                "properties": {},
                "properties_attributes": {}
            }
        },
        {
            "hadoop-env": {
                "properties": {
                    "content": "\n# Set Hadoop-specific environment variables here.\n\n# The only required environment variable is JAVA_HOME.  All others are\n# optional.  When running a distributed configuration it is best to\n# set JAVA_HOME in this file, so that it is correctly defined on\n# remote nodes.\n\n# The java implementation to use.  Required.\nexport JAVA_HOME={{java_home}}\nexport HADOOP_HOME_WARN_SUPPRESS=1\n\n# Hadoop home directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# Hadoop Configuration Directory\n\n{# this is different for HDP1 #}\n# Path to jsvc required by secure HDP 2.0 datanode\nexport JSVC_HOME={{jsvc_path}}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nexport HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\n\nexport HADOOP_NAMENODE_INIT_HEAPSIZE=\"-Xms{{namenode_heapsize}}\"\n\n# Extra Java runtime options.  Empty by default.\nexport HADOOP_OPTS=\"-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}\"\n\n# Command specific options appended to HADOOP_OPTS when specified\nHADOOP_JOBTRACKER_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{jtnode_opt_newsize}} -XX:MaxNewSize={{jtnode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xmx{{jtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dmapred.audit.logger=INFO,MRAUDIT -Dhadoop.mapreduce.jobsummary.logger=INFO,JSA ${HADOOP_JOBTRACKER_OPTS}\"\n\nHADOOP_TASKTRACKER_OPTS=\"-server -Xmx{{ttnode_heapsize}} -Dhadoop.security.logger=ERROR,console -Dmapred.audit.logger=ERROR,console ${HADOOP_TASKTRACKER_OPTS}\"\n\n{% if java_version < 8 %}\nSHARED_HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT\"\nexport HADOOP_NAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-namenode/bin/kill-name-node\\\" -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_DATANODE_OPTS=\"-server -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -XX:PermSize=128m -XX:MaxPermSize=256m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-secondarynamenode/bin/kill-secondary-name-node\\\" ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n\n{% else %}\nSHARED_HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT\"\nexport HADOOP_NAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-namenode/bin/kill-name-node\\\" -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_DATANODE_OPTS=\"-server -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/hdp/current/hadoop-hdfs-secondarynamenode/bin/kill-secondary-name-node\\\" ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS\"\n{% endif %}\n\nHADOOP_NFS3_OPTS=\"-Xmx{{nfsgateway_heapsize}}m -Dhadoop.security.logger=ERROR,DRFAS ${HADOOP_NFS3_OPTS}\"\nHADOOP_BALANCER_OPTS=\"-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}\"\n\n\n# On secure datanodes, user to run the datanode as after dropping privileges\nexport HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}\n\n# Extra ssh options.  Empty by default.\nexport HADOOP_SSH_OPTS=\"-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR\"\n\n# Where log files are stored.  $HADOOP_HOME/logs by default.\nexport HADOOP_LOG_DIR={{hdfs_log_dir_prefix}}/$USER\n\n# History server logs\nexport HADOOP_MAPRED_LOG_DIR={{mapred_log_dir_prefix}}/$USER\n\n# Where log files are stored in the secure data environment.\nexport HADOOP_SECURE_DN_LOG_DIR={{hdfs_log_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.\n# export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves\n\n# host:path where hadoop code should be rsync'd from.  Unset by default.\n# export HADOOP_MASTER=master:/home/$USER/src/hadoop\n\n# Seconds to sleep between slave commands.  Unset by default.  This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HADOOP_SLAVE_SLEEP=0.1\n\n# The directory where pid files are stored. /tmp by default.\nexport HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}/$USER\nexport HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# History server pid\nexport HADOOP_MAPRED_PID_DIR={{mapred_pid_dir_prefix}}/$USER\n\nYARN_RESOURCEMANAGER_OPTS=\"-Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\"\n\n# A string representing this instance of hadoop. $USER by default.\nexport HADOOP_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes.  See 'man nice'.\n\n# export HADOOP_NICENESS=10\n\n# Use libraries from standard classpath\nJAVA_JDBC_LIBS=\"\"\n\n#Add libraries required by mysql connector\nfor jarFile in `ls /usr/share/java/*mysql* 2>/dev/null`\ndo\n  JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\ndone\n\n# Add libraries required by oracle connector\nfor jarFile in `ls /usr/share/java/*ojdbc* 2>/dev/null`\ndo\n  JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\ndone\n\nexport HADOOP_CLASSPATH=${HADOOP_CLASSPATH}:${JAVA_JDBC_LIBS}\n\n# Setting path to hdfs command line\nexport HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n\n# Mostly required for hadoop 2.0\nexport JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}\n\nexport HADOOP_OPTS=\"-Dhdp.version=$HDP_VERSION $HADOOP_OPTS\"",
                    "dtnode_heapsize": "1024m",
                    "hadoop_heapsize": "1024",
                    "hadoop_pid_dir_prefix": "/var/run/hadoop",
                    "hadoop_root_logger": "INFO,RFA",
                    "hdfs_log_dir_prefix": "/var/log/hadoop",
                    "hdfs_user": "hdfs",
                    "hdfs_user_nofile_limit": "128000",
                    "hdfs_user_nproc_limit": "65536",
                    "keyserver_host": " ",
                    "keyserver_port": "",
                    "namenode_heapsize": "1024m",
                    "namenode_opt_maxnewsize": "128m",
                    "namenode_opt_maxpermsize": "256m",
                    "namenode_opt_newsize": "128m",
                    "namenode_opt_permsize": "128m",
                    "nfsgateway_heapsize": "1024",
                    "proxyuser_group": "users"
                },
                "properties_attributes": {}
            }
        },
        {
            "storm-site": {
                "properties": {
                    "_storm.min.ruid": "null",
                    "_storm.thrift.nonsecure.transport": "backtype.storm.security.auth.SimpleTransportPlugin",
                    "_storm.thrift.secure.transport": "backtype.storm.security.auth.kerberos.KerberosSaslTransportPlugin",
                    "dev.zookeeper.path": "/tmp/dev-storm-zookeeper",
                    "drpc.childopts": "-Xmx768m _JAAS_PLACEHOLDER",
                    "drpc.invocations.port": "3773",
                    "drpc.port": "3772",
                    "drpc.queue.size": "128",
                    "drpc.request.timeout.secs": "600",
                    "drpc.worker.threads": "64",
                    "java.library.path": "/usr/local/lib:/opt/local/lib:/usr/lib:/usr/hdp/current/storm-client/lib",
                    "logviewer.appender.name": "A1",
                    "logviewer.childopts": "-Xmx128m _JAAS_PLACEHOLDER",
                    "logviewer.port": "8081",
                    "metrics.reporter.register": "org.apache.hadoop.metrics2.sink.storm.StormTimelineMetricsReporter",
                    "nimbus.cleanup.inbox.freq.secs": "600",
                    "nimbus.file.copy.expiration.secs": "600",
                    "nimbus.inbox.jar.expiration.secs": "3600",
                    "nimbus.monitor.freq.secs": "10",
                    "nimbus.reassign": "true",
                    "nimbus.seeds": "['%HOSTGROUP::host_group_namenode_passive%']",
                    "nimbus.supervisor.timeout.secs": "60",
                    "nimbus.task.launch.secs": "120",
                    "nimbus.task.timeout.secs": "30",
                    "nimbus.thrift.max_buffer_size": "1048576",
                    "nimbus.thrift.port": "6627",
                    "nimbus.topology.validator": "backtype.storm.nimbus.DefaultTopologyValidator",
                    "storm.cluster.mode": "distributed",
                    "storm.local.dir": "/grid/hadoop/storm",
                    "storm.local.mode.zmq": "false",
                    "storm.log.dir": "{{log_dir}}",
                    "storm.messaging.netty.buffer_size": "5242880",
                    "storm.messaging.netty.client_worker_threads": "1",
                    "storm.messaging.netty.max_retries": "30",
                    "storm.messaging.netty.max_wait_ms": "1000",
                    "storm.messaging.netty.min_wait_ms": "100",
                    "storm.messaging.netty.server_worker_threads": "1",
                    "storm.messaging.transport": "backtype.storm.messaging.netty.Context",
                    "storm.thrift.transport": "{{storm_thrift_transport}}",
                    "storm.zookeeper.connection.timeout": "15000",
                    "storm.zookeeper.port": "2181",
                    "storm.zookeeper.retry.interval": "1000",
                    "storm.zookeeper.retry.intervalceiling.millis": "30000",
                    "storm.zookeeper.retry.times": "5",
                    "storm.zookeeper.root": "/storm",
                    "storm.zookeeper.servers": "['%HOSTGROUP::host_group_zk_1%','%HOSTGROUP::host_group_zk_2%']",
                    "storm.zookeeper.session.timeout": "20000",
                    "supervisor.heartbeat.frequency.secs": "5",
                    "supervisor.monitor.frequency.secs": "3",
                    "supervisor.slots.ports": "[6700, 6701, 6702, 6703]",
                    "supervisor.worker.start.timeout.secs": "120",
                    "supervisor.worker.timeout.secs": "30",
                    "task.heartbeat.frequency.secs": "3",
                    "task.refresh.poll.secs": "10",
                    "topology.acker.executors": "null",
                    "topology.builtin.metrics.bucket.size.secs": "60",
                    "topology.debug": "false",
                    "topology.disruptor.wait.strategy": "com.lmax.disruptor.BlockingWaitStrategy",
                    "topology.enable.message.timeouts": "true",
                    "topology.error.throttle.interval.secs": "10",
                    "topology.executor.receive.buffer.size": "1024",
                    "topology.executor.send.buffer.size": "1024",
                    "topology.fall.back.on.java.serialization": "true",
                    "topology.kryo.factory": "backtype.storm.serialization.DefaultKryoFactory",
                    "topology.max.error.report.per.interval": "5",
                    "topology.max.replication.wait.time.sec": "{{actual_topology_max_replication_wait_time_sec}}",
                    "topology.max.replication.wait.time.sec.default": "60",
                    "topology.max.spout.pending": "50",
                    "topology.max.task.parallelism": "null",
                    "topology.message.timeout.secs": "30",
                    "topology.min.replication.count": "{{actual_topology_min_replication_count}}",
                    "topology.min.replication.count.default": "1",
                    "topology.optimize": "true",
                    "topology.receiver.buffer.size": "8",
                    "topology.skip.missing.kryo.registrations": "false",
                    "topology.sleep.spout.wait.strategy.time.ms": "1",
                    "topology.spout.wait.strategy": "backtype.storm.spout.SleepSpoutWaitStrategy",
                    "topology.state.synchronization.timeout.secs": "60",
                    "topology.stats.sample.rate": "0.05",
                    "topology.tick.tuple.freq.secs": "null",
                    "topology.transfer.buffer.size": "1024",
                    "topology.trident.batch.emit.interval.millis": "500",
                    "topology.tuple.serializer": "backtype.storm.serialization.types.ListDelegateSerializer",
                    "topology.worker.childopts": "null",
                    "topology.worker.shared.thread.pool.size": "4",
                    "topology.workers": "1",
                    "transactional.zookeeper.port": "null",
                    "transactional.zookeeper.root": "/transactional",
                    "transactional.zookeeper.servers": "null",
                    "ui.childopts": "-Xmx768m _JAAS_PLACEHOLDER",
                    "ui.filter": "null",
                    "ui.port": "8080",
                    "worker.heartbeat.frequency.secs": "1",
                    "zmq.hwm": "0",
                    "zmq.linger.millis": "5000",
                    "zmq.threads": "1"
                },
                "properties_attributes": {}
            }
        },
        {
            "zookeeper-env": {
                "properties": {
                    "content": "\nexport JAVA_HOME={{java64_home}}\nexport ZOOKEEPER_HOME={{zk_home}}\nexport ZOO_LOG_DIR={{zk_log_dir}}\nexport ZOOPIDFILE={{zk_pid_file}}\nexport SERVER_JVMFLAGS={{zk_server_heapsize}}\nexport JAVA=$JAVA_HOME/bin/java\nexport CLASSPATH=$CLASSPATH:/usr/share/zookeeper/*\n\n{% if security_enabled %}\nexport SERVER_JVMFLAGS=\"$SERVER_JVMFLAGS -Djava.security.auth.login.config={{zk_server_jaas_file}}\"\nexport CLIENT_JVMFLAGS=\"$CLIENT_JVMFLAGS -Djava.security.auth.login.config={{zk_client_jaas_file}}\"\n{% endif %}",
                    "zk_log_dir": "/var/log/zookeeper",
                    "zk_pid_dir": "/var/run/zookeeper",
                    "zk_user": "zookeeper"
                },
                "properties_attributes": {}
            }
        },
        {
            "yarn-log4j": {
                "properties": {
                    "content": "\n#Relative to Yarn Log Dir Prefix\nyarn.log.dir=.\n#\n# Job Summary Appender\n#\n# Use following logger to send summary to separate file defined by\n# hadoop.mapreduce.jobsummary.log.file rolled daily:\n# hadoop.mapreduce.jobsummary.logger=INFO,JSA\n#\nhadoop.mapreduce.jobsummary.logger=${hadoop.root.logger}\nhadoop.mapreduce.jobsummary.log.file=hadoop-mapreduce.jobsummary.log\nlog4j.appender.JSA=org.apache.log4j.DailyRollingFileAppender\n# Set the ResourceManager summary log filename\nyarn.server.resourcemanager.appsummary.log.file=hadoop-mapreduce.jobsummary.log\n# Set the ResourceManager summary log level and appender\nyarn.server.resourcemanager.appsummary.logger=${hadoop.root.logger}\n#yarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\n\n# To enable AppSummaryLogging for the RM,\n# set yarn.server.resourcemanager.appsummary.logger to\n# LEVEL,RMSUMMARY in hadoop-env.sh\n\n# Appender for ResourceManager Application Summary Log\n# Requires the following properties to be set\n#    - hadoop.log.dir (Hadoop Log directory)\n#    - yarn.server.resourcemanager.appsummary.log.file (resource manager app summary log filename)\n#    - yarn.server.resourcemanager.appsummary.logger (resource manager app summary log level and appender)\nlog4j.appender.RMSUMMARY=org.apache.log4j.RollingFileAppender\nlog4j.appender.RMSUMMARY.File=${yarn.log.dir}/${yarn.server.resourcemanager.appsummary.log.file}\nlog4j.appender.RMSUMMARY.MaxFileSize=256MB\nlog4j.appender.RMSUMMARY.MaxBackupIndex=20\nlog4j.appender.RMSUMMARY.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMSUMMARY.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.JSA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\nlog4j.appender.JSA.DatePattern=.yyyy-MM-dd\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=${yarn.server.resourcemanager.appsummary.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=false\n\n# Appender for viewing information for errors and warnings\nyarn.ewma.cleanupInterval=300\nyarn.ewma.messageAgeLimitSeconds=86400\nyarn.ewma.maxUniqueMessages=250\nlog4j.appender.EWMA=org.apache.hadoop.yarn.util.Log4jWarningErrorMetricsAppender\nlog4j.appender.EWMA.cleanupInterval=${yarn.ewma.cleanupInterval}\nlog4j.appender.EWMA.messageAgeLimitSeconds=${yarn.ewma.messageAgeLimitSeconds}\nlog4j.appender.EWMA.maxUniqueMessages=${yarn.ewma.maxUniqueMessages}"
                },
                "properties_attributes": {}
            }
        },
        {
            "mapred-env": {
                "properties": {
                    "content": "\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n\nexport HADOOP_JOB_HISTORYSERVER_HEAPSIZE={{jobhistory_heapsize}}\n\nexport HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA\n\n#export HADOOP_JOB_HISTORYSERVER_OPTS=\n#export HADOOP_MAPRED_LOG_DIR=\"\" # Where log files are stored.  $HADOOP_MAPRED_HOME/logs by default.\n#export HADOOP_JHS_LOGGER=INFO,RFA # Hadoop JobSummary logger.\n#export HADOOP_MAPRED_PID_DIR= # The pid files are stored. /tmp by default.\n#export HADOOP_MAPRED_IDENT_STRING= #A string representing this instance of hadoop. $USER by default\n#export HADOOP_MAPRED_NICENESS= #The scheduling priority for daemons. Defaults to 0.\nexport HADOOP_OPTS=\"-Dhdp.version=$HDP_VERSION $HADOOP_OPTS\"\nexport HADOOP_OPTS=\"-Djava.io.tmpdir={{hadoop_java_io_tmpdir}} $HADOOP_OPTS\"\nexport JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"",
                    "jobhistory_heapsize": "900",
                    "mapred_log_dir_prefix": "/var/log/hadoop-mapreduce",
                    "mapred_pid_dir_prefix": "/var/run/hadoop-mapreduce",
                    "mapred_user": "mapred",
                    "mapred_user_nofile_limit": "32768",
                    "mapred_user_nproc_limit": "65536"
                },
                "properties_attributes": {}
            }
        },
        {
            "cluster-env": {
                "properties": {
                    "command_retry_enabled": "true",
                    "command_retry_max_time_in_sec": "600",
                    "commands_to_retry": "INSTALL,START",
                    "ignore_groupsusers_create": "false",
                    "kerberos_domain": "EXAMPLE.COM",
                    "override_uid": "true",
                    "repo_suse_rhel_template": "[{{repo_id}}]\nname={{repo_id}}\n{% if mirror_list %}mirrorlist={{mirror_list}}{% else %}baseurl={{base_url}}{% endif %}\n\npath=/\nenabled=1\ngpgcheck=0",
                    "repo_ubuntu_template": "{{package_type}} {{base_url}} {{components}}",
                    "security_enabled": "false",
                    "smokeuser": "ambari-qa",
                    "smokeuser_keytab": "/etc/security/keytabs/smokeuser.headless.keytab",
                    "user_group": "hadoop"
                },
                "properties_attributes": {}
            }
        }
    ],
    "host_groups": [
        {
            "cardinality": "1",
            "components": [
                {
                    "name": "MAPREDUCE2_CLIENT"
                },
                {
                    "name": "YARN_CLIENT"
                },
                {
                    "name": "HDFS_CLIENT"
                },
                {
                    "name": "ZKFC"
                },
                {
                    "name": "HBASE_CLIENT"
                },
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "HBASE_MASTER"
                },
                {
                    "name": "NAMENODE"
                },
                {
                    "name": "ZOOKEEPER_CLIENT"
                }
            ],
            "configurations": [],
            "name": "host_group_namenode_active"
        },
        {
            "cardinality": "3",
            "components": [
                {
                    "name": "NODEMANAGER"
                },
                {
                    "name": "MAPREDUCE2_CLIENT"
                },
                {
                    "name": "YARN_CLIENT"
                },
                {
                    "name": "HDFS_CLIENT"
                },
                {
                    "name": "HBASE_CLIENT"
                },
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "SUPERVISOR"
                },
                {
                    "name": "ZOOKEEPER_SERVER"
                },
                {
                    "name": "ZOOKEEPER_CLIENT"
                }
            ],
            "configurations": [],
            "name": "host_group_worker"
        },
        {
            "cardinality": "1",
            "components": [
                {
                    "name": "MAPREDUCE2_CLIENT"
                },
                {
                    "name": "YARN_CLIENT"
                },
                {
                    "name": "HDFS_CLIENT"
                },
                {
                    "name": "HBASE_CLIENT"
                },
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "JOURNALNODE"
                },
                {
                    "name": "ZOOKEEPER_CLIENT"
                },
                {
                    "name": "ZOOKEEPER_SERVER"
                },
                {
                    "name": "RESOURCEMANAGER"
                }
            ],
            "configurations": [],
            "name": "host_group_zk_1"
        },
        {
            "cardinality": "3",
            "components": [
                {
                    "name": "MAPREDUCE2_CLIENT"
                },
                {
                    "name": "YARN_CLIENT"
                },
                {
                    "name": "HDFS_CLIENT"
                },
                {
                    "name": "HBASE_REGIONSERVER"
                },
                {
                    "name": "DATANODE"
                },
                {
                    "name": "HBASE_CLIENT"
                },
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "ZOOKEEPER_CLIENT"
                }
            ],
            "configurations": [],
            "name": "host_group_data_nodes"
        },
        {
            "cardinality": "1",
            "components": [
                {
                    "name": "YARN_CLIENT"
                },
                {
                    "name": "HDFS_CLIENT"
                },
                {
                    "name": "ZKFC"
                },
                {
                    "name": "STORM_UI_SERVER"
                },
                {
                    "name": "HISTORYSERVER"
                },
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "HBASE_MASTER"
                },
                {
                    "name": "NAMENODE"
                },
                {
                    "name": "NIMBUS"
                },
                {
                    "name": "ZOOKEEPER_CLIENT"
                },
                {
                    "name": "MAPREDUCE2_CLIENT"
                },
                {
                    "name": "HBASE_CLIENT"
                },
                {
                    "name": "APP_TIMELINE_SERVER"
                },
                {
                    "name": "DRPC_SERVER"
                },
                {
                    "name": "METRICS_COLLECTOR"
                },
                {
                    "name": "RESOURCEMANAGER"
                }
            ],
            "configurations": [],
            "name": "host_group_namenode_passive"
        },
        {
            "cardinality": "2",
            "components": [
                {
                    "name": "MAPREDUCE2_CLIENT"
                },
                {
                    "name": "YARN_CLIENT"
                },
                {
                    "name": "HDFS_CLIENT"
                },
                {
                    "name": "HBASE_CLIENT"
                },
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "JOURNALNODE"
                },
                {
                    "name": "ZOOKEEPER_CLIENT"
                }
            ],
            "configurations": [],
            "name": "host_group_zk_2"
        },
        {
            "cardinality": "1",
            "components": [
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "KAFKA_BROKER"
                }
            ],
            "configurations": [
                {
                    "kafka-broker": {
                        "listeners": "PLAINTEXT://<%= scope.lookupvar("ambari_server::params::kafka_broker1_fqdn") %>:6667"
                    }
                }
            ],
            "name": "host_group_kafka_broker_1"
        },
        {
            "cardinality": "1",
            "components": [
                {
                    "name": "METRICS_MONITOR"
                },
                {
                    "name": "KAFKA_BROKER"
                }
            ],
            "configurations": [
                {
                    "kafka-broker": {
                        "listeners": "PLAINTEXT://<%= scope.lookupvar("ambari_server::params::kafka_broker2_fqdn") %>:6667"
                    }
                }
            ],
            "name": "host_group_kafka_broker_2"
        }
    ]
}
